
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 28 12:35:07 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import errors.GestionErroresExp;
import ast.E;
import ast.EIden;
import ast.ASExp;
import constructorast.Main;
import ast.S;
import ast.SList;
import ast.EList;
import ast.SDecl;
import ast.STipoIden;
import ast.SFunction;
import ast.SReduce;
import ast.ASSent;
import ast.T;
import ast.ASTipo;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 28 12:35:07 CEST 2021
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\022\006\000\002\022\006\000\002\022\005" +
    "\000\002\022\005\000\002\023\004\000\002\023\002\000" +
    "\002\007\003\000\002\007\003\000\002\010\007\000\002" +
    "\010\007\000\002\010\011\000\002\010\006\000\002\010" +
    "\006\000\002\010\010\000\002\011\011\000\002\011\010" +
    "\000\002\011\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\024\005" +
    "\000\002\024\004\000\002\013\003\000\002\013\006\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\004\000\002\037\006\000\002\037\005" +
    "\000\002\037\005\000\002\037\004\000\002\055\005\000" +
    "\002\055\006\000\002\055\005\000\002\055\006\000\002" +
    "\056\004\000\002\056\004\000\002\056\004\000\002\057" +
    "\004\000\002\057\004\000\002\057\003\000\002\054\005" +
    "\000\002\054\005\000\002\054\006\000\002\054\005\000" +
    "\002\054\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\012\004\000\002\025" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\007" +
    "\000\002\014\007\000\002\014\005\000\002\014\003\000" +
    "\002\014\005\000\002\035\004\000\002\004\010\000\002" +
    "\017\005\000\002\017\003\000\002\005\006\000\002\027" +
    "\007\000\002\027\006\000\002\027\005\000\002\020\005" +
    "\000\002\020\003\000\002\030\010\000\002\030\007\000" +
    "\002\015\005\000\002\015\004\000\002\015\005\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\031" +
    "\007\000\002\031\006\000\002\032\013\000\002\032\006" +
    "\000\002\033\012\000\002\033\011\000\002\033\010\000" +
    "\002\033\011\000\002\033\007\000\002\033\010\000\002" +
    "\021\010\000\002\021\007\000\002\021\007\000\002\021" +
    "\006\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\034\004\000\002\040\005\000\002\040\003\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\003" +
    "\000\002\044\005\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\003\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\003\000\002\051\005\000\002\051\003\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\003\000\002\053\005\000\002\053\006\000\002\053\005" +
    "\000\002\053\006\000\002\053\004\000\002\053\004\000" +
    "\002\053\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\070\002\ufff9\003\ufff9\004\ufff9\010\ufff9\014" +
    "\ufff9\034\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\071\ufff9\074\007\101\ufff9\001\002\000\070\002\ufff9\003" +
    "\ufff9\004\ufff9\010\ufff9\014\ufff9\034\ufff9\041\ufff9\042\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\071\ufff9\074\u014f\101\ufff9\001" +
    "\002\000\004\002\u014d\001\002\000\066\002\uffff\003\044" +
    "\004\031\010\057\014\024\034\022\041\016\042\021\045" +
    "\043\046\041\047\030\050\065\051\040\052\023\053\053" +
    "\056\061\057\025\060\042\062\064\063\032\064\073\065" +
    "\051\066\026\067\052\071\055\101\063\001\002\000\006" +
    "\003\011\075\010\001\002\000\004\004\013\001\002\000" +
    "\004\004\012\001\002\000\070\002\ufffb\003\ufffb\004\ufffb" +
    "\010\ufffb\014\ufffb\034\ufffb\041\ufffb\042\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\071\ufffb\074\ufffb\101\ufffb\001\002\000\070" +
    "\002\ufffc\003\ufffc\004\ufffc\010\ufffc\014\ufffc\034\ufffc\041" +
    "\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\056\ufffc\057\ufffc\060\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\071\ufffc\074\ufffc" +
    "\101\ufffc\001\002\000\072\002\uffe8\003\uffe8\004\uffe8\010" +
    "\uffe8\014\uffe8\015\uffe8\034\uffe8\041\uffe8\042\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\071\uffe8\101\uffe8\001\002\000" +
    "\014\007\u014c\012\241\034\242\044\333\101\uffd0\001\002" +
    "\000\004\101\u014b\001\002\000\072\002\uffe9\003\uffe9\004" +
    "\uffe9\010\uffe9\014\uffe9\015\uffe9\034\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\071\uffe9\101\uffe9\001" +
    "\002\000\006\004\uffe2\011\uffe2\001\002\000\004\101\u014a" +
    "\001\002\000\010\010\057\034\022\101\234\001\002\000" +
    "\014\004\uffcc\011\uffcc\012\uffcc\034\uffcc\101\uffcc\001\002" +
    "\000\066\003\ufff9\004\ufff9\010\ufff9\014\ufff9\015\ufff9\034" +
    "\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\056\ufff9\057\ufff9\060\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9" +
    "\101\ufff9\001\002\000\004\101\u0143\001\002\000\006\004" +
    "\uffdf\011\uffdf\001\002\000\012\007\uffbc\010\u013b\012\324" +
    "\044\325\001\002\000\014\004\uffcf\011\uffcf\012\uffcf\034" +
    "\uffcf\101\uffcf\001\002\000\072\002\uffb3\003\uffb3\004\uffb3" +
    "\010\uffb3\014\uffb3\015\uffb3\034\uffb3\041\uffb3\042\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\071\uffb3\101\uffb3\001\002" +
    "\000\006\003\u0132\010\u0133\001\002\000\072\002\uffe7\003" +
    "\uffe7\004\uffe7\010\uffe7\014\uffe7\015\uffe7\034\uffe7\041\uffe7" +
    "\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\071\uffe7\101" +
    "\uffe7\001\002\000\070\002\ufff7\003\ufff7\004\ufff7\010\ufff7" +
    "\014\ufff7\015\ufff7\034\ufff7\041\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\071\ufff7\101\ufff7\001\002\000\070\002\ufffa" +
    "\003\ufffa\004\ufffa\010\ufffa\014\ufffa\015\ufffa\034\ufffa\041" +
    "\ufffa\042\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\056\ufffa\057\ufffa\060\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa\101\ufffa" +
    "\001\002\000\072\002\uffea\003\uffea\004\uffea\010\uffea\014" +
    "\uffea\015\uffea\034\uffea\041\uffea\042\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\071\uffea\101\uffea\001\002\000\004\004" +
    "\u0131\001\002\000\014\004\uffcd\011\uffcd\012\uffcd\034\uffcd" +
    "\101\uffcd\001\002\000\004\101\u011f\001\002\000\006\003" +
    "\u0110\010\u0111\001\002\000\040\004\uffe0\010\122\011\uffe0" +
    "\021\076\032\124\034\113\041\125\042\075\043\110\054" +
    "\105\055\123\076\117\077\077\100\121\101\103\001\002" +
    "\000\012\004\u010d\007\u010c\011\u010b\015\250\001\002\000" +
    "\006\004\uffe4\011\uffe4\001\002\000\072\002\uffe6\003\uffe6" +
    "\004\uffe6\010\uffe6\014\uffe6\015\uffe6\034\uffe6\041\uffe6\042" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6\101\uffe6" +
    "\001\002\000\040\003\u0107\010\122\021\076\032\124\034" +
    "\113\041\125\042\075\043\110\054\105\055\123\070\260" +
    "\076\117\077\077\100\121\101\103\001\002\000\006\004" +
    "\uffda\011\uffda\001\002\000\004\010\u0102\001\002\000\006" +
    "\004\uffde\011\uffde\001\002\000\014\004\uffcb\011\uffcb\012" +
    "\uffcb\034\uffcb\101\uffcb\001\002\000\006\004\uffe3\011\uffe3" +
    "\001\002\000\006\003\335\010\336\001\002\000\072\002" +
    "\uffee\003\uffee\004\uffee\010\uffee\014\uffee\015\uffee\034\uffee" +
    "\041\uffee\042\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\071" +
    "\uffee\101\uffee\001\002\000\010\010\057\034\022\101\234" +
    "\001\002\000\004\007\317\001\002\000\004\101\307\001" +
    "\002\000\072\002\uffe5\003\uffe5\004\uffe5\010\uffe5\014\uffe5" +
    "\015\uffe5\034\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\071\uffe5\101\uffe5\001\002\000\022\007\uffd3" +
    "\010\303\012\uffd3\034\uffd3\041\302\042\301\044\uffd3\101" +
    "\uffd3\001\002\000\006\003\272\010\273\001\002\000\014" +
    "\004\uffce\011\uffce\012\uffce\034\uffce\101\uffce\001\002\000" +
    "\072\002\uffed\003\uffed\004\uffed\010\uffed\014\uffed\015\uffed" +
    "\034\uffed\041\uffed\042\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\071\uffed\101\uffed\001\002\000\004\101\271\001\002" +
    "\000\070\002\ufff8\003\ufff8\004\ufff8\010\ufff8\014\ufff8\015" +
    "\ufff8\034\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8" +
    "\071\ufff8\101\ufff8\001\002\000\014\004\uffd1\011\uffd1\012" +
    "\264\034\265\101\uffd1\001\002\000\010\004\uffb1\007\232" +
    "\010\233\001\002\000\004\010\074\001\002\000\036\010" +
    "\122\021\076\032\124\034\113\041\125\042\075\043\110" +
    "\054\105\055\123\075\120\076\117\077\077\100\121\101" +
    "\103\001\002\000\020\010\122\054\105\055\123\076\117" +
    "\077\077\100\121\101\103\001\002\000\034\010\122\021" +
    "\076\032\124\034\113\041\125\042\075\043\110\054\105" +
    "\055\123\076\117\077\077\100\121\101\103\001\002\000" +
    "\072\004\uff59\006\uff59\010\uff59\011\uff59\012\uff59\013\uff59" +
    "\015\uff59\016\uff59\017\uff59\020\uff59\022\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041" +
    "\uff59\042\uff59\044\uff59\001\002\000\056\004\uff6c\006\uff6c" +
    "\011\uff6c\013\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\022" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c" +
    "\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\001\002\000\056\004\uff6e\006\uff6e\011\uff6e\013\uff6e" +
    "\015\uff6e\016\uff6e\017\uff6e\020\uff6e\022\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\030\222\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\036\224\037\223\001\002\000" +
    "\050\004\uff71\006\uff71\011\uff71\013\uff71\015\uff71\016\uff71" +
    "\017\uff71\020\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026" +
    "\uff71\027\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\001\002\000\072\004\uff56\006\uff56\010\uff56\011\uff56\012" +
    "\uff56\013\uff56\015\uff56\016\uff56\017\uff56\020\uff56\022\uff56" +
    "\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56" +
    "\040\uff56\041\uff56\042\uff56\044\uff56\001\002\000\072\004" +
    "\uff5c\006\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\015\uff5c" +
    "\016\uff5c\017\uff5c\020\uff5c\022\uff5c\023\uff5c\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042" +
    "\uff5c\044\uff5c\001\002\000\072\004\uff5b\006\uff5b\010\uff5b" +
    "\011\uff5b\012\uff5b\013\uff5b\015\uff5b\016\uff5b\017\uff5b\020" +
    "\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b" +
    "\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\044\uff5b\001\002" +
    "\000\050\004\uff75\006\uff75\011\uff75\013\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\022\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\212\031\uff75\032\uff75\033\213\034\215\035" +
    "\214\001\002\000\040\004\uff77\006\uff77\011\uff77\013\uff77" +
    "\015\uff77\016\uff77\017\uff77\020\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\031\uff77\032\uff77\001\002\000\020" +
    "\010\122\054\105\055\123\076\117\077\077\100\121\101" +
    "\103\001\002\000\040\004\uff7a\006\uff7a\011\uff7a\013\uff7a" +
    "\015\uff7a\016\uff7a\017\uff7a\020\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\031\166\032\167\001\002\000\034" +
    "\004\uff7f\006\uff7f\011\uff7f\013\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\020\uff7f\022\uff7f\023\163\024\161\025\164\026\162" +
    "\001\002\000\034\010\122\021\076\032\124\034\113\041" +
    "\125\042\075\043\110\054\105\055\123\076\117\077\077" +
    "\100\121\101\103\001\002\000\024\004\uff82\006\uff82\011" +
    "\uff82\013\uff82\015\uff82\016\156\017\uff82\020\uff82\022\157" +
    "\001\002\000\020\004\uff84\006\uff84\011\uff84\013\uff84\015" +
    "\uff84\017\154\020\uff84\001\002\000\006\011\207\020\152" +
    "\001\002\000\072\004\uff57\006\uff57\010\uff57\011\uff57\012" +
    "\uff57\013\uff57\015\uff57\016\uff57\017\uff57\020\uff57\022\uff57" +
    "\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031" +
    "\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57" +
    "\040\uff57\041\uff57\042\uff57\044\uff57\001\002\000\004\011" +
    "\206\001\002\000\072\004\uff58\006\uff58\010\uff58\011\uff58" +
    "\012\uff58\013\uff58\015\uff58\016\uff58\017\uff58\020\uff58\022" +
    "\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58\030\uff58" +
    "\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037" +
    "\uff58\040\uff58\041\uff58\042\uff58\044\uff58\001\002\000\034" +
    "\010\122\021\076\032\124\034\113\041\125\042\075\043" +
    "\110\054\105\055\123\076\117\077\077\100\121\101\103" +
    "\001\002\000\072\004\uff5a\006\uff5a\010\uff5a\011\uff5a\012" +
    "\uff5a\013\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\022\uff5a" +
    "\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031" +
    "\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\041\uff5a\042\uff5a\044\uff5a\001\002\000\020\010" +
    "\122\054\105\055\123\076\117\077\077\100\121\101\103" +
    "\001\002\000\020\010\122\054\105\055\123\076\117\077" +
    "\077\100\121\101\103\001\002\000\072\004\uff63\006\uff63" +
    "\010\135\011\uff63\012\132\013\uff63\015\uff63\016\uff63\017" +
    "\uff63\020\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63" +
    "\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035" +
    "\uff63\036\uff63\037\uff63\040\uff63\041\134\042\133\044\136" +
    "\001\002\000\060\004\uff6a\006\uff6a\011\uff6a\013\uff6a\015" +
    "\uff6a\016\uff6a\017\uff6a\020\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033" +
    "\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\130\001\002" +
    "\000\034\010\122\021\076\032\124\034\113\041\125\042" +
    "\075\043\110\054\105\055\123\076\117\077\077\100\121" +
    "\101\103\001\002\000\056\004\uff6b\006\uff6b\011\uff6b\013" +
    "\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\022\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\001\002" +
    "\000\034\010\122\021\076\032\124\034\113\041\125\042" +
    "\075\043\110\054\105\055\123\076\117\077\077\100\121" +
    "\101\103\001\002\000\072\004\uff5d\006\uff5d\010\uff5d\011" +
    "\uff5d\012\uff5d\013\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d" +
    "\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030" +
    "\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d" +
    "\037\uff5d\040\uff5d\041\uff5d\042\uff5d\044\uff5d\001\002\000" +
    "\072\004\uff5e\006\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e" +
    "\015\uff5e\016\uff5e\017\uff5e\020\uff5e\022\uff5e\023\uff5e\024" +
    "\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e" +
    "\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041" +
    "\uff5e\042\uff5e\044\uff5e\001\002\000\040\010\122\011\140" +
    "\014\142\021\076\032\124\034\113\041\125\042\075\043" +
    "\110\054\105\055\123\076\117\077\077\100\121\101\103" +
    "\001\002\000\004\101\137\001\002\000\072\004\uff62\006" +
    "\uff62\010\uff62\011\uff62\012\uff62\013\uff62\015\uff62\016\uff62" +
    "\017\uff62\020\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026" +
    "\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62" +
    "\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62\044" +
    "\uff62\001\002\000\072\004\uff60\006\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\015\uff60\016\uff60\017\uff60\020\uff60\022" +
    "\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\037" +
    "\uff60\040\uff60\041\uff60\042\uff60\044\uff60\001\002\000\012" +
    "\006\uffab\011\uffab\015\uffab\020\152\001\002\000\036\010" +
    "\122\014\142\021\076\032\124\034\113\041\125\042\075" +
    "\043\110\054\105\055\123\076\117\077\077\100\121\101" +
    "\103\001\002\000\006\006\144\011\145\001\002\000\036" +
    "\010\122\014\147\021\076\032\124\034\113\041\125\042" +
    "\075\043\110\054\105\055\123\076\117\077\077\100\121" +
    "\101\103\001\002\000\072\004\uff5f\006\uff5f\010\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f" +
    "\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030" +
    "\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f" +
    "\037\uff5f\040\uff5f\041\uff5f\042\uff5f\044\uff5f\001\002\000" +
    "\012\006\uffac\011\uffac\015\uffac\020\152\001\002\000\036" +
    "\010\122\014\142\021\076\032\124\034\113\041\125\042" +
    "\075\043\110\054\105\055\123\076\117\077\077\100\121" +
    "\101\103\001\002\000\006\006\144\015\151\001\002\000" +
    "\010\006\uffad\011\uffad\015\uffad\001\002\000\034\010\122" +
    "\021\076\032\124\034\113\041\125\042\075\043\110\054" +
    "\105\055\123\076\117\077\077\100\121\101\103\001\002" +
    "\000\020\004\uff85\006\uff85\011\uff85\013\uff85\015\uff85\017" +
    "\154\020\uff85\001\002\000\034\010\122\021\076\032\124" +
    "\034\113\041\125\042\075\043\110\054\105\055\123\076" +
    "\117\077\077\100\121\101\103\001\002\000\024\004\uff83" +
    "\006\uff83\011\uff83\013\uff83\015\uff83\016\156\017\uff83\020" +
    "\uff83\022\157\001\002\000\034\010\122\021\076\032\124" +
    "\034\113\041\125\042\075\043\110\054\105\055\123\076" +
    "\117\077\077\100\121\101\103\001\002\000\034\010\122" +
    "\021\076\032\124\034\113\041\125\042\075\043\110\054" +
    "\105\055\123\076\117\077\077\100\121\101\103\001\002" +
    "\000\034\004\uff80\006\uff80\011\uff80\013\uff80\015\uff80\016" +
    "\uff80\017\uff80\020\uff80\022\uff80\023\163\024\161\025\164" +
    "\026\162\001\002\000\034\010\122\021\076\032\124\034" +
    "\113\041\125\042\075\043\110\054\105\055\123\076\117" +
    "\077\077\100\121\101\103\001\002\000\034\010\122\021" +
    "\076\032\124\034\113\041\125\042\075\043\110\054\105" +
    "\055\123\076\117\077\077\100\121\101\103\001\002\000" +
    "\034\010\122\021\076\032\124\034\113\041\125\042\075" +
    "\043\110\054\105\055\123\076\117\077\077\100\121\101" +
    "\103\001\002\000\034\010\122\021\076\032\124\034\113" +
    "\041\125\042\075\043\110\054\105\055\123\076\117\077" +
    "\077\100\121\101\103\001\002\000\040\004\uff7c\006\uff7c" +
    "\011\uff7c\013\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\031\166\032\167" +
    "\001\002\000\034\010\122\021\076\032\124\034\113\041" +
    "\125\042\075\043\110\054\105\055\123\076\117\077\077" +
    "\100\121\101\103\001\002\000\034\010\122\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\040\004" +
    "\uff78\006\uff78\011\uff78\013\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\031" +
    "\uff78\032\uff78\001\002\000\040\004\uff79\006\uff79\011\uff79" +
    "\013\uff79\015\uff79\016\uff79\017\uff79\020\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\031\uff79\032\uff79\001\002" +
    "\000\040\004\uff7e\006\uff7e\011\uff7e\013\uff7e\015\uff7e\016" +
    "\uff7e\017\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\031\166\032\167\001\002\000\040\004\uff7b\006" +
    "\uff7b\011\uff7b\013\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\031\166\032" +
    "\167\001\002\000\040\004\uff7d\006\uff7d\011\uff7d\013\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\031\166\032\167\001\002\000\034" +
    "\004\uff81\006\uff81\011\uff81\013\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\022\uff81\023\163\024\161\025\164\026\162" +
    "\001\002\000\006\006\144\015\177\001\002\000\010\006" +
    "\uffaa\011\uffaa\015\uffaa\001\002\000\006\013\201\020\152" +
    "\001\002\000\072\004\uff61\006\uff61\010\uff61\011\uff61\012" +
    "\uff61\013\uff61\015\uff61\016\uff61\017\uff61\020\uff61\022\uff61" +
    "\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\030\uff61\031" +
    "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61" +
    "\040\uff61\041\uff61\042\uff61\044\uff61\001\002\000\072\004" +
    "\uff67\006\uff67\010\135\011\uff67\012\132\013\uff67\015\uff67" +
    "\016\uff67\017\uff67\020\uff67\022\uff67\023\uff67\024\uff67\025" +
    "\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67" +
    "\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\134\042" +
    "\133\044\136\001\002\000\072\004\uff68\006\uff68\010\135" +
    "\011\uff68\012\132\013\uff68\015\uff68\016\uff68\017\uff68\020" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68" +
    "\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036" +
    "\uff68\037\uff68\040\uff68\041\134\042\133\044\136\001\002" +
    "\000\006\011\205\020\152\001\002\000\072\004\uff55\006" +
    "\uff55\010\uff55\011\uff55\012\uff55\013\uff55\015\uff55\016\uff55" +
    "\017\uff55\020\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026" +
    "\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55" +
    "\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55\044" +
    "\uff55\001\002\000\006\004\uffdd\011\uffdd\001\002\000\006" +
    "\004\uffdc\011\uffdc\001\002\000\060\004\uff65\006\uff65\011" +
    "\uff65\013\uff65\015\uff65\016\uff65\017\uff65\020\uff65\022\uff65" +
    "\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031" +
    "\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65" +
    "\040\uff65\001\002\000\072\004\uff64\006\uff64\010\135\011" +
    "\uff64\012\132\013\uff64\015\uff64\016\uff64\017\uff64\020\uff64" +
    "\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64" +
    "\037\uff64\040\uff64\041\134\042\133\044\136\001\002\000" +
    "\034\010\122\021\076\032\124\034\113\041\125\042\075" +
    "\043\110\054\105\055\123\076\117\077\077\100\121\101" +
    "\103\001\002\000\034\010\122\021\076\032\124\034\113" +
    "\041\125\042\075\043\110\054\105\055\123\076\117\077" +
    "\077\100\121\101\103\001\002\000\034\010\122\021\076" +
    "\032\124\034\113\041\125\042\075\043\110\054\105\055" +
    "\123\076\117\077\077\100\121\101\103\001\002\000\034" +
    "\010\122\021\076\032\124\034\113\041\125\042\075\043" +
    "\110\054\105\055\123\076\117\077\077\100\121\101\103" +
    "\001\002\000\050\004\uff74\006\uff74\011\uff74\013\uff74\015" +
    "\uff74\016\uff74\017\uff74\020\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\027\uff74\031\uff74\032\uff74\033\uff74\034" +
    "\uff74\035\uff74\001\002\000\050\004\uff73\006\uff73\011\uff73" +
    "\013\uff73\015\uff73\016\uff73\017\uff73\020\uff73\022\uff73\023" +
    "\uff73\024\uff73\025\uff73\026\uff73\027\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\001\002\000\040\004\uff76\006" +
    "\uff76\011\uff76\013\uff76\015\uff76\016\uff76\017\uff76\020\uff76" +
    "\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\031\uff76\032" +
    "\uff76\001\002\000\050\004\uff72\006\uff72\011\uff72\013\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\022\uff72\023\uff72\024" +
    "\uff72\025\uff72\026\uff72\027\uff72\031\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\001\002\000\034\010\122\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\034\010" +
    "\122\021\076\032\124\034\113\041\125\042\075\043\110" +
    "\054\105\055\123\076\117\077\077\100\121\101\103\001" +
    "\002\000\034\010\122\021\076\032\124\034\113\041\125" +
    "\042\075\043\110\054\105\055\123\076\117\077\077\100" +
    "\121\101\103\001\002\000\050\004\uff70\006\uff70\011\uff70" +
    "\013\uff70\015\uff70\016\uff70\017\uff70\020\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\001\002\000\056\004\uff6d\006" +
    "\uff6d\011\uff6d\013\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\001\002\000\050\004\uff6f\006\uff6f\011\uff6f\013" +
    "\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\022\uff6f\023\uff6f" +
    "\024\uff6f\025\uff6f\026\uff6f\027\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\034\uff6f\035\uff6f\001\002\000\060\004\uff69\006\uff69" +
    "\011\uff69\013\uff69\015\uff69\016\uff69\017\uff69\020\uff69\022" +
    "\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69" +
    "\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\001\002\000\072\004\uff66\006\uff66\010\135" +
    "\011\uff66\012\132\013\uff66\015\uff66\016\uff66\017\uff66\020" +
    "\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66" +
    "\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\134\042\133\044\136\001\002" +
    "\000\040\010\122\014\257\021\076\032\124\034\113\041" +
    "\125\042\075\043\110\054\105\055\123\070\260\076\117" +
    "\077\077\100\121\101\103\001\002\000\020\011\237\047" +
    "\030\050\065\051\040\052\023\053\053\101\234\001\002" +
    "\000\020\004\uffd3\007\uffd3\011\uffd3\012\uffd3\034\uffd3\044" +
    "\uffd3\101\uffd3\001\002\000\006\006\uffa0\011\uffa0\001\002" +
    "\000\006\006\251\011\252\001\002\000\006\003\247\014" +
    "\024\001\002\000\014\004\uffd0\011\uffd0\012\241\034\242" +
    "\101\uffd0\001\002\000\036\010\122\013\243\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\014\004" +
    "\uffc6\011\uffc6\012\uffc6\034\uffc6\101\uffc6\001\002\000\014" +
    "\004\uffc7\011\uffc7\012\uffc7\034\uffc7\101\uffc7\001\002\000" +
    "\006\013\245\020\152\001\002\000\020\004\uffd2\007\uffd2" +
    "\011\uffd2\012\uffd2\034\uffd2\044\uffd2\101\uffd2\001\002\000" +
    "\072\002\uffa3\003\uffa3\004\uffa3\010\uffa3\014\uffa3\015\uffa3" +
    "\034\uffa3\041\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\071\uffa3\101\uffa3\001\002\000\004\015\250\001\002" +
    "\000\076\002\uffd4\003\uffd4\004\uffd4\010\uffd4\014\uffd4\015" +
    "\uffd4\034\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\071\uffd4\072\uffd4\073\uffd4\101\uffd4\001\002\000" +
    "\016\047\030\050\065\051\040\052\023\053\053\101\234" +
    "\001\002\000\006\003\247\014\024\001\002\000\072\002" +
    "\uffa4\003\uffa4\004\uffa4\010\uffa4\014\uffa4\015\uffa4\034\uffa4" +
    "\041\uffa4\042\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\071" +
    "\uffa4\101\uffa4\001\002\000\006\006\uffa1\011\uffa1\001\002" +
    "\000\006\004\uffaf\011\uffaf\001\002\000\010\004\uffb0\011" +
    "\uffb0\020\152\001\002\000\036\010\122\014\142\021\076" +
    "\032\124\034\113\041\125\042\075\043\110\054\105\055" +
    "\123\076\117\077\077\100\121\101\103\001\002\000\016" +
    "\047\030\050\065\051\040\052\023\053\053\101\234\001" +
    "\002\000\006\004\uffa9\011\uffa9\001\002\000\006\006\144" +
    "\015\263\001\002\000\006\004\uffae\011\uffae\001\002\000" +
    "\036\010\122\013\266\021\076\032\124\034\113\041\125" +
    "\042\075\043\110\054\105\055\123\076\117\077\077\100" +
    "\121\101\103\001\002\000\014\004\uffca\011\uffca\012\uffca" +
    "\034\uffca\101\uffca\001\002\000\014\004\uffc8\011\uffc8\012" +
    "\uffc8\034\uffc8\101\uffc8\001\002\000\006\013\270\020\152" +
    "\001\002\000\014\004\uffc9\011\uffc9\012\uffc9\034\uffc9\101" +
    "\uffc9\001\002\000\014\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\001\002\000\004\011\277\001\002\000\034\010" +
    "\122\021\076\032\124\034\113\041\125\042\075\043\110" +
    "\054\105\055\123\076\117\077\077\100\121\101\103\001" +
    "\002\000\006\011\275\020\152\001\002\000\062\003\044" +
    "\004\031\010\057\014\024\034\022\041\016\042\021\045" +
    "\043\046\041\047\030\050\065\051\040\052\023\053\053" +
    "\056\061\057\025\062\064\063\032\064\073\065\051\066" +
    "\026\067\052\071\055\101\063\001\002\000\072\002\uff97" +
    "\003\uff97\004\uff97\010\uff97\014\uff97\015\uff97\034\uff97\041" +
    "\uff97\042\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\071\uff97" +
    "\101\uff97\001\002\000\062\003\044\004\031\010\057\014" +
    "\024\034\022\041\016\042\021\045\043\046\041\047\030" +
    "\050\065\051\040\052\023\053\053\056\061\057\025\062" +
    "\064\063\032\064\073\065\051\066\026\067\052\071\055" +
    "\101\063\001\002\000\072\002\uff96\003\uff96\004\uff96\010" +
    "\uff96\014\uff96\015\uff96\034\uff96\041\uff96\042\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\071\uff96\101\uff96\001\002\000" +
    "\006\004\uffd6\011\uffd6\001\002\000\006\004\uffd8\011\uffd8" +
    "\001\002\000\040\010\122\011\304\014\142\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\006\004" +
    "\uffc3\011\uffc3\001\002\000\006\006\144\011\306\001\002" +
    "\000\006\004\uffc2\011\uffc2\001\002\000\004\007\310\001" +
    "\002\000\004\014\311\001\002\000\004\101\313\001\002" +
    "\000\006\006\314\015\315\001\002\000\006\006\uffa6\015" +
    "\uffa6\001\002\000\004\101\316\001\002\000\006\004\uffa8" +
    "\011\uffa8\001\002\000\006\006\uffa7\015\uffa7\001\002\000" +
    "\040\003\uffc1\010\uffc1\021\uffc1\032\uffc1\034\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\054\uffc1\055\uffc1\070\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\001\002\000\010\011\332\012\331" +
    "\044\333\001\002\000\012\007\uffbc\011\uffbc\012\324\044" +
    "\325\001\002\000\004\011\323\001\002\000\014\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\044\uffb8\001\002\000\034\010" +
    "\122\021\076\032\124\034\113\041\125\042\075\043\110" +
    "\054\105\055\123\076\117\077\077\100\121\101\103\001" +
    "\002\000\004\101\326\001\002\000\014\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\044\uffba\001\002\000\006\013\330\020" +
    "\152\001\002\000\014\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\044\uffb9\001\002\000\034\010\122\021\076\032\124\034" +
    "\113\041\125\042\075\043\110\054\105\055\123\076\117" +
    "\077\077\100\121\101\103\001\002\000\014\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\044\uffb7\001\002\000\004\101\334" +
    "\001\002\000\014\007\uffbb\010\uffbb\011\uffbb\012\uffbb\044" +
    "\uffbb\001\002\000\004\011\372\001\002\000\034\010\122" +
    "\021\076\032\124\034\113\041\125\042\075\043\110\054" +
    "\105\055\123\076\117\077\077\100\121\101\103\001\002" +
    "\000\006\011\340\020\152\001\002\000\006\003\341\014" +
    "\342\001\002\000\004\015\371\001\002\000\004\072\344" +
    "\001\002\000\010\015\356\072\357\073\354\001\002\000" +
    "\006\003\345\010\346\001\002\000\004\011\352\001\002" +
    "\000\034\010\122\021\076\032\124\034\113\041\125\042" +
    "\075\043\110\054\105\055\123\076\117\077\077\100\121" +
    "\101\103\001\002\000\006\011\350\020\152\001\002\000" +
    "\006\003\247\014\024\001\002\000\010\015\uff8c\072\uff8c" +
    "\073\uff8c\001\002\000\006\003\247\014\024\001\002\000" +
    "\010\015\uff8a\072\uff8a\073\uff8a\001\002\000\006\003\247" +
    "\014\024\001\002\000\004\015\367\001\002\000\072\002" +
    "\uff92\003\uff92\004\uff92\010\uff92\014\uff92\015\uff92\034\uff92" +
    "\041\uff92\042\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\071" +
    "\uff92\101\uff92\001\002\000\006\003\360\010\361\001\002" +
    "\000\004\011\365\001\002\000\034\010\122\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\006\011" +
    "\363\020\152\001\002\000\006\003\247\014\024\001\002" +
    "\000\010\015\uff8d\072\uff8d\073\uff8d\001\002\000\006\003" +
    "\247\014\024\001\002\000\010\015\uff8b\072\uff8b\073\uff8b" +
    "\001\002\000\072\002\uff93\003\uff93\004\uff93\010\uff93\014" +
    "\uff93\015\uff93\034\uff93\041\uff93\042\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\071\uff93\101\uff93\001\002\000\004\015" +
    "\uff86\001\002\000\072\002\uff8e\003\uff8e\004\uff8e\010\uff8e" +
    "\014\uff8e\015\uff8e\034\uff8e\041\uff8e\042\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\071\uff8e\101\uff8e\001\002\000\006" +
    "\003\373\014\374\001\002\000\004\015\u0101\001\002\000" +
    "\004\072\344\001\002\000\010\015\377\072\357\073\354" +
    "\001\002\000\004\015\u0100\001\002\000\072\002\uff91\003" +
    "\uff91\004\uff91\010\uff91\014\uff91\015\uff91\034\uff91\041\uff91" +
    "\042\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\071\uff91\101" +
    "\uff91\001\002\000\072\002\uff90\003\uff90\004\uff90\010\uff90" +
    "\014\uff90\015\uff90\034\uff90\041\uff90\042\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\067\uff90\071\uff90\101\uff90\001\002\000\072" +
    "\002\uff8f\003\uff8f\004\uff8f\010\uff8f\014\uff8f\015\uff8f\034" +
    "\uff8f\041\uff8f\042\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
    "\071\uff8f\101\uff8f\001\002\000\004\101\u0103\001\002\000" +
    "\004\011\u0104\001\002\000\006\004\uffdb\011\uffdb\001\002" +
    "\000\004\004\u010a\001\002\000\006\004\u0109\020\152\001" +
    "\002\000\004\004\u0108\001\002\000\072\002\uffb4\003\uffb4" +
    "\004\uffb4\010\uffb4\014\uffb4\015\uffb4\034\uffb4\041\uffb4\042" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\071\uffb4\101\uffb4" +
    "\001\002\000\072\002\uffb6\003\uffb6\004\uffb6\010\uffb6\014" +
    "\uffb6\015\uffb6\034\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\071\uffb6\101\uffb6\001\002\000\072\002" +
    "\uffb5\003\uffb5\004\uffb5\010\uffb5\014\uffb5\015\uffb5\034\uffb5" +
    "\041\uffb5\042\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\071" +
    "\uffb5\101\uffb5\001\002\000\006\003\247\014\024\001\002" +
    "\000\040\003\uffbf\010\uffbf\021\uffbf\032\uffbf\034\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\054\uffbf\055\uffbf\070\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\101\uffbf\001\002\000\072\002\uffeb\003" +
    "\uffeb\004\uffeb\010\uffeb\014\uffeb\015\uffeb\034\uffeb\041\uffeb" +
    "\042\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\071\uffeb\101" +
    "\uffeb\001\002\000\072\002\uffa2\003\uffa2\004\uffa2\010\uffa2" +
    "\014\uffa2\015\uffa2\034\uffa2\041\uffa2\042\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\071\uffa2\101\uffa2\001\002\000\010" +
    "\004\uffe1\011\uffe1\020\152\001\002\000\004\011\u0119\001" +
    "\002\000\034\010\122\021\076\032\124\034\113\041\125" +
    "\042\075\043\110\054\105\055\123\076\117\077\077\100" +
    "\121\101\103\001\002\000\006\011\u0113\020\152\001\002" +
    "\000\064\003\044\004\031\010\057\014\024\034\022\041" +
    "\016\042\021\045\043\046\041\047\030\050\065\051\040" +
    "\052\023\053\053\056\061\057\025\060\042\062\064\063" +
    "\032\064\073\065\051\066\026\067\052\071\055\101\063" +
    "\001\002\000\072\002\ufff5\003\ufff5\004\ufff5\010\ufff5\014" +
    "\ufff5\015\ufff5\034\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\u0116\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\071\ufff5\101\ufff5\001\002\000\070\002" +
    "\ufff6\003\ufff6\004\ufff6\010\ufff6\014\ufff6\015\ufff6\034\ufff6" +
    "\041\ufff6\042\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6\101" +
    "\ufff6\001\002\000\064\003\044\004\031\010\057\014\024" +
    "\034\022\041\016\042\021\045\043\046\041\047\030\050" +
    "\065\051\040\052\023\053\053\056\061\057\025\060\042" +
    "\062\064\063\032\064\073\065\051\066\026\067\052\071" +
    "\055\101\063\001\002\000\072\002\ufff0\003\ufff0\004\ufff0" +
    "\010\ufff0\014\ufff0\015\ufff0\034\ufff0\041\ufff0\042\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\067\ufff0\071\ufff0\101\ufff0\001\002" +
    "\000\070\002\ufff4\003\ufff4\004\ufff4\010\ufff4\014\ufff4\015" +
    "\ufff4\034\ufff4\041\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\071\ufff4\101\ufff4\001\002\000\064\003\044\004\031\010" +
    "\057\014\024\034\022\041\016\042\021\045\043\046\041" +
    "\047\030\050\065\051\040\052\023\053\053\056\061\057" +
    "\025\060\042\062\064\063\032\064\073\065\051\066\026" +
    "\067\052\071\055\101\063\001\002\000\072\002\ufff2\003" +
    "\ufff2\004\ufff2\010\ufff2\014\ufff2\015\ufff2\034\ufff2\041\ufff2" +
    "\042\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\056\ufff2\057\ufff2\060\ufff2\061\u011c\062\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\071\ufff2\101" +
    "\ufff2\001\002\000\070\002\ufff3\003\ufff3\004\ufff3\010\ufff3" +
    "\014\ufff3\015\ufff3\034\ufff3\041\ufff3\042\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\067\ufff3\071\ufff3\101\ufff3\001\002\000\064\003\044" +
    "\004\031\010\057\014\024\034\022\041\016\042\021\045" +
    "\043\046\041\047\030\050\065\051\040\052\023\053\053" +
    "\056\061\057\025\060\042\062\064\063\032\064\073\065" +
    "\051\066\026\067\052\071\055\101\063\001\002\000\072" +
    "\002\uffef\003\uffef\004\uffef\010\uffef\014\uffef\015\uffef\034" +
    "\uffef\041\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\071\uffef\101\uffef\001\002\000\070\002\ufff1\003\ufff1\004" +
    "\ufff1\010\ufff1\014\ufff1\015\ufff1\034\ufff1\041\ufff1\042\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\071\ufff1\101\ufff1\001\002\000" +
    "\004\014\u0120\001\002\000\020\003\u0123\047\030\050\065" +
    "\051\040\052\023\053\053\101\234\001\002\000\010\004" +
    "\uffb1\007\232\011\uffb1\001\002\000\022\003\u0127\015\u0128" +
    "\047\030\050\065\051\040\052\023\053\053\101\234\001" +
    "\002\000\022\003\uff9a\015\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\101\uff9a\001\002\000\004\004\u0125\001" +
    "\002\000\022\003\uff9c\015\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\101\uff9c\001\002\000\022\003\u012e\015" +
    "\u012f\047\030\050\065\051\040\052\023\053\053\101\234" +
    "\001\002\000\006\004\u012c\011\u010b\001\002\000\072\002" +
    "\uff9e\003\uff9e\004\uff9e\010\uff9e\014\uff9e\015\uff9e\034\uff9e" +
    "\041\uff9e\042\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\071" +
    "\uff9e\101\uff9e\001\002\000\004\004\u012b\001\002\000\022" +
    "\003\uff98\015\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\101\uff98\001\002\000\022\003\uff9d\015\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\101\uff9d\001\002\000" +
    "\022\003\uff9b\015\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\101\uff9b\001\002\000\004\010\233\001\002\000" +
    "\004\011\u010b\001\002\000\072\002\uff9f\003\uff9f\004\uff9f" +
    "\010\uff9f\014\uff9f\015\uff9f\034\uff9f\041\uff9f\042\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\071\uff9f\101\uff9f\001\002" +
    "\000\022\003\uff99\015\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\101\uff99\001\002\000\072\002\uffec\003\uffec" +
    "\004\uffec\010\uffec\014\uffec\015\uffec\034\uffec\041\uffec\042" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\071\uffec\101\uffec" +
    "\001\002\000\004\011\u0141\001\002\000\016\047\030\050" +
    "\065\051\040\052\023\053\053\101\234\001\002\000\004" +
    "\004\u0135\001\002\000\034\010\122\021\076\032\124\034" +
    "\113\041\125\042\075\043\110\054\105\055\123\076\117" +
    "\077\077\100\121\101\103\001\002\000\006\004\u0137\020" +
    "\152\001\002\000\042\010\057\041\016\042\021\045\043" +
    "\047\030\050\065\051\040\052\023\053\053\056\061\057" +
    "\025\064\073\065\051\066\026\067\052\101\063\001\002" +
    "\000\012\012\241\034\242\044\333\101\uffd0\001\002\000" +
    "\004\011\u013f\001\002\000\010\010\u013b\012\324\044\325" +
    "\001\002\000\040\010\122\011\u013c\014\142\021\076\032" +
    "\124\034\113\041\125\042\075\043\110\054\105\055\123" +
    "\076\117\077\077\100\121\101\103\001\002\000\006\004" +
    "\uffc5\011\uffc5\001\002\000\006\006\144\011\u013e\001\002" +
    "\000\006\004\uffc4\011\uffc4\001\002\000\062\003\044\004" +
    "\031\010\057\014\024\034\022\041\016\042\021\045\043" +
    "\046\041\047\030\050\065\051\040\052\023\053\053\056" +
    "\061\057\025\062\064\063\032\064\073\065\051\066\026" +
    "\067\052\071\055\101\063\001\002\000\072\002\uff95\003" +
    "\uff95\004\uff95\010\uff95\014\uff95\015\uff95\034\uff95\041\uff95" +
    "\042\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\071\uff95\101" +
    "\uff95\001\002\000\062\003\044\004\031\010\057\014\024" +
    "\034\022\041\016\042\021\045\043\046\041\047\030\050" +
    "\065\051\040\052\023\053\053\056\061\057\025\062\064" +
    "\063\032\064\073\065\051\066\026\067\052\071\055\101" +
    "\063\001\002\000\072\002\uff94\003\uff94\004\uff94\010\uff94" +
    "\014\uff94\015\uff94\034\uff94\041\uff94\042\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\071\uff94\101\uff94\001\002\000\004" +
    "\007\u0144\001\002\000\016\047\030\050\065\051\040\052" +
    "\023\053\053\101\234\001\002\000\006\004\uffa5\011\uffa5" +
    "\001\002\000\066\003\044\004\031\010\057\014\024\015" +
    "\u0147\034\022\041\016\042\021\045\043\046\041\047\030" +
    "\050\065\051\040\052\023\053\053\056\061\057\025\060" +
    "\042\062\064\063\032\064\073\065\051\066\026\067\052" +
    "\071\055\101\063\001\002\000\076\002\uffd5\003\uffd5\004" +
    "\uffd5\010\uffd5\014\uffd5\015\uffd5\034\uffd5\041\uffd5\042\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\101\uffd5\001\002\000\012\007\uffbe\011\uffbe\012\331" +
    "\044\333\001\002\000\006\007\uffbd\011\uffbd\001\002\000" +
    "\006\004\uffd7\011\uffd7\001\002\000\006\004\uffd9\011\uffd9" +
    "\001\002\000\040\003\uffc0\010\uffc0\021\uffc0\032\uffc0\034" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\054\uffc0\055\uffc0\070\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\101\uffc0\001\002\000\004\002" +
    "\000\001\002\000\066\002\001\003\044\004\031\010\057" +
    "\014\024\034\022\041\016\042\021\045\043\046\041\047" +
    "\030\050\065\051\040\052\023\053\053\056\061\057\025" +
    "\060\042\062\064\063\032\064\073\065\051\066\026\067" +
    "\052\071\055\101\063\001\002\000\006\003\u0151\075\u0150" +
    "\001\002\000\004\004\u0153\001\002\000\004\004\u0152\001" +
    "\002\000\070\002\ufffd\003\ufffd\004\ufffd\010\ufffd\014\ufffd" +
    "\034\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\071" +
    "\ufffd\074\ufffd\101\ufffd\001\002\000\070\002\ufffe\003\ufffe" +
    "\004\ufffe\010\ufffe\014\ufffe\034\ufffe\041\ufffe\042\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\071\ufffe\074\ufffe\101\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\010\002\004\022\003\023\005\001\001\000" +
    "\004\023\u014d\001\001\000\002\001\001\000\060\003\055" +
    "\004\044\005\053\006\036\007\034\010\067\011\033\012" +
    "\071\013\014\024\065\025\017\026\035\027\016\030\013" +
    "\031\032\032\045\033\061\036\066\037\070\054\026\055" +
    "\047\056\046\057\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u0147\054\320\057\u0148\001\001\000\002\001\001" +
    "\000\004\023\u0145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\040" +
    "\u010e\041\114\042\113\043\111\044\110\045\106\046\105" +
    "\047\101\050\100\051\077\052\126\053\125\060\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\035\u0104\040\u0105\041\114\042\113\043\111\044" +
    "\110\045\106\046\105\047\101\050\100\051\077\052\126" +
    "\053\125\060\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\317\054" +
    "\320\057\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\040\115\041\114\042\113\043\111\044\110" +
    "\045\106\046\105\047\101\050\100\051\077\052\126\053" +
    "\125\060\103\001\001\000\006\053\230\060\103\001\001" +
    "\000\010\052\227\053\125\060\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\210\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\207\053\125\060\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\040\203\041\114\042\113" +
    "\043\111\044\110\045\106\046\105\047\101\050\100\051" +
    "\077\052\126\053\125\060\103\001\001\000\002\001\001" +
    "\000\006\053\202\060\103\001\001\000\006\053\201\060" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\051\130\052\126\053\125\060\103\001\001\000\002\001" +
    "\001\000\034\040\177\041\114\042\113\043\111\044\110" +
    "\045\106\046\105\047\101\050\100\051\077\052\126\053" +
    "\125\060\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\142\040\140\041\114\042\113\043\111\044" +
    "\110\045\106\046\105\047\101\050\100\051\077\052\126" +
    "\053\125\060\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\175" +
    "\040\140\041\114\042\113\043\111\044\110\045\106\046" +
    "\105\047\101\050\100\051\077\052\126\053\125\060\103" +
    "\001\001\000\002\001\001\000\034\040\145\041\114\042" +
    "\113\043\111\044\110\045\106\046\105\047\101\050\100" +
    "\051\077\052\126\053\125\060\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\147\040\140\041\114" +
    "\042\113\043\111\044\110\045\106\046\105\047\101\050" +
    "\100\051\077\052\126\053\125\060\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\041\152\042\113\043" +
    "\111\044\110\045\106\046\105\047\101\050\100\051\077" +
    "\052\126\053\125\060\103\001\001\000\002\001\001\000" +
    "\030\042\154\043\111\044\110\045\106\046\105\047\101" +
    "\050\100\051\077\052\126\053\125\060\103\001\001\000" +
    "\002\001\001\000\026\043\174\044\110\045\106\046\105" +
    "\047\101\050\100\051\077\052\126\053\125\060\103\001" +
    "\001\000\026\043\157\044\110\045\106\046\105\047\101" +
    "\050\100\051\077\052\126\053\125\060\103\001\001\000" +
    "\002\001\001\000\024\044\173\045\106\046\105\047\101" +
    "\050\100\051\077\052\126\053\125\060\103\001\001\000" +
    "\024\044\172\045\106\046\105\047\101\050\100\051\077" +
    "\052\126\053\125\060\103\001\001\000\024\044\171\045" +
    "\106\046\105\047\101\050\100\051\077\052\126\053\125" +
    "\060\103\001\001\000\024\044\164\045\106\046\105\047" +
    "\101\050\100\051\077\052\126\053\125\060\103\001\001" +
    "\000\002\001\001\000\022\045\170\046\105\047\101\050" +
    "\100\051\077\052\126\053\125\060\103\001\001\000\022" +
    "\045\167\046\105\047\101\050\100\051\077\052\126\053" +
    "\125\060\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\047\220\050\100\051\077\052\126\053\125\060\103" +
    "\001\001\000\022\045\217\046\105\047\101\050\100\051" +
    "\077\052\126\053\125\060\103\001\001\000\016\047\216" +
    "\050\100\051\077\052\126\053\125\060\103\001\001\000" +
    "\016\047\215\050\100\051\077\052\126\053\125\060\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\047\226\050\100\051\077" +
    "\052\126\053\125\060\103\001\001\000\012\051\225\052" +
    "\126\053\125\060\103\001\001\000\016\047\224\050\100" +
    "\051\077\052\126\053\125\060\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\035\254\040\255\041\114\042" +
    "\113\043\111\044\110\045\106\046\105\047\101\050\100" +
    "\051\077\052\126\053\125\060\103\001\001\000\014\012" +
    "\234\013\237\020\235\036\066\037\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\245\001\001\000\002\001\001\000\034\040\243\041\114" +
    "\042\113\043\111\044\110\045\106\046\105\047\101\050" +
    "\100\051\077\052\126\053\125\060\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\253\013\237\036\066\037\070\001\001\000" +
    "\004\024\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\261\040" +
    "\140\041\114\042\113\043\111\044\110\045\106\046\105" +
    "\047\101\050\100\051\077\052\126\053\125\060\103\001" +
    "\001\000\010\013\237\036\260\037\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\040" +
    "\266\041\114\042\113\043\111\044\110\045\106\046\105" +
    "\047\101\050\100\051\077\052\126\053\125\060\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\040\273\041\114\042\113\043\111\044\110\045\106" +
    "\046\105\047\101\050\100\051\077\052\126\053\125\060" +
    "\103\001\001\000\002\001\001\000\052\003\275\004\044" +
    "\005\053\006\036\012\071\013\014\024\065\025\017\026" +
    "\035\027\016\030\013\031\032\032\045\033\061\036\066" +
    "\037\070\054\026\055\047\056\046\057\057\001\001\000" +
    "\002\001\001\000\052\003\277\004\044\005\053\006\036" +
    "\012\071\013\014\024\065\025\017\026\035\027\016\030" +
    "\013\031\032\032\045\033\061\036\066\037\070\054\026" +
    "\055\047\056\046\057\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\014\304\040\140" +
    "\041\114\042\113\043\111\044\110\045\106\046\105\047" +
    "\101\050\100\051\077\052\126\053\125\060\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\040\326\041\114\042\113\043\111\044\110" +
    "\045\106\046\105\047\101\050\100\051\077\052\126\053" +
    "\125\060\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\040\243\041" +
    "\114\042\113\043\111\044\110\045\106\046\105\047\101" +
    "\050\100\051\077\052\126\053\125\060\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\040\336\041\114\042\113\043\111\044" +
    "\110\045\106\046\105\047\101\050\100\051\077\052\126" +
    "\053\125\060\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\342\001\001\000\004" +
    "\034\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\040\346\041\114\042\113\043\111\044\110\045\106" +
    "\046\105\047\101\050\100\051\077\052\126\053\125\060" +
    "\103\001\001\000\002\001\001\000\004\024\350\001\001" +
    "\000\002\001\001\000\004\024\352\001\001\000\002\001" +
    "\001\000\004\024\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\040" +
    "\361\041\114\042\113\043\111\044\110\045\106\046\105" +
    "\047\101\050\100\051\077\052\126\053\125\060\103\001" +
    "\001\000\002\001\001\000\004\024\363\001\001\000\002" +
    "\001\001\000\004\024\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\374\001\001\000" +
    "\004\034\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\040\u0111\041\114\042\113" +
    "\043\111\044\110\045\106\046\105\047\101\050\100\051" +
    "\077\052\126\053\125\060\103\001\001\000\002\001\001" +
    "\000\056\003\055\004\044\005\053\006\036\010\u0114\011" +
    "\u0113\012\071\013\014\024\065\025\017\026\035\027\016" +
    "\030\013\031\032\032\045\033\061\036\066\037\070\054" +
    "\026\055\047\056\046\057\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\055\004\044\005\053\006" +
    "\036\010\u0117\011\u0116\012\071\013\014\024\065\025\017" +
    "\026\035\027\016\030\013\031\032\032\045\033\061\036" +
    "\066\037\070\054\026\055\047\056\046\057\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\055\004" +
    "\044\005\053\006\036\010\u011a\011\u0119\012\071\013\014" +
    "\024\065\025\017\026\035\027\016\030\013\031\032\032" +
    "\045\033\061\036\066\037\070\054\026\055\047\056\046" +
    "\057\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\055\004\044\005\053\006\036\010\u011d\011\u011c" +
    "\012\071\013\014\024\065\025\017\026\035\027\016\030" +
    "\013\031\032\032\045\033\061\036\066\037\070\054\026" +
    "\055\047\056\046\057\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\u0120\013\237" +
    "\015\u0121\025\u0123\036\066\037\070\001\001\000\002\001" +
    "\001\000\020\012\071\013\237\016\u0125\025\u0128\027\u0129" +
    "\036\066\037\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\u012c\013\237\027\u012f" +
    "\036\066\037\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\u0120\013\237\025\u0133\036\066\037" +
    "\070\001\001\000\002\001\001\000\034\040\u0135\041\114" +
    "\042\113\043\111\044\110\045\106\046\105\047\101\050" +
    "\100\051\077\052\126\053\125\060\103\001\001\000\002" +
    "\001\001\000\026\004\044\005\053\006\u0138\012\u0120\013" +
    "\u0137\025\017\036\066\037\070\054\u0139\055\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\u013c\040\140\041\114\042\113\043\111\044\110" +
    "\045\106\046\105\047\101\050\100\051\077\052\126\053" +
    "\125\060\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u013f\004\044\005\053\006" +
    "\036\012\071\013\014\024\065\025\017\026\035\027\016" +
    "\030\013\031\032\032\045\033\061\036\066\037\070\054" +
    "\026\055\047\056\046\057\057\001\001\000\002\001\001" +
    "\000\052\003\u0141\004\044\005\053\006\036\012\071\013" +
    "\014\024\065\025\017\026\035\027\016\030\013\031\032" +
    "\032\045\033\061\036\066\037\070\054\026\055\047\056" +
    "\046\057\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\237\036\u0144\037\070\001\001\000\002\001" +
    "\001\000\060\003\055\004\044\005\053\006\036\007\034" +
    "\010\067\011\033\012\071\013\014\024\065\025\017\026" +
    "\035\027\016\030\013\031\032\032\045\033\061\036\066" +
    "\037\070\054\026\055\047\056\046\057\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\055\004\044\005\053\006\036\007\034" +
    "\010\067\011\033\012\071\013\014\024\065\025\017\026" +
    "\035\027\016\030\013\031\032\032\045\033\061\036\066" +
    "\037\070\054\026\055\047\056\046\057\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    hayError = false;
    listaErrores = new ArrayList<String>();
    errores = new GestionErroresExp();
    AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 UnidadLexica n = (UnidadLexica) getScanner().next_token(); return n; 
    }

 
    public boolean hayError;
    private ArrayList<String> listaErrores;
    public void printErrores(String fileName){
        if(listaErrores.size() == 0) return;
        System.out.println("Errores sintacticos fichero: " + fileName + " Parando la compilacion");
        for(String s: listaErrores)
            System.out.println(s);
    }
    private GestionErroresExp errores;
    public void syntax_error(Symbol ul) { //cuando se llama a esta funcion????
        hayError = true;
        listaErrores.add(errores.errorSintactico((UnidadLexica) ul));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {


    private ASExp as = new ASExp();
    private ASSent ass = new ASSent();
    private ASTipo ast = new ASTipo();
    public ArrayList<HashMap<String, S>> pilaTablas = new ArrayList<HashMap<String, S>>(); // de momento arrayList
    private SList include(String fileName){ // llama a la funcion de carga(que hace analisis lexico y sintactico), y trata los errores
        SList list2 = (SList) Main.load( "./" + fileName);
        if(list2 == null){
            parser.hayError = true; // no indicamos los errores, pues ya los ha indicado la funcion Main.load
            return ass.list();
        }
        return list2;
    }

  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= SInclude S0 
            {
              S RESULT =null;
		SList list1 = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		SList list2 = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list1.addAll(list2.get()); RESULT=list1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S0 
            {
              S RESULT =null;
		SList lista = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=lista; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SInclude ::= SInclude INCLUDE STRING PUNTOCOMA 
            {
              SList RESULT =null;
		SList list1 = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 SList list2 = include(name.lexema()); list1.addAll(list2.get()); RESULT=list1; RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInclude",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SInclude ::= SInclude INCLUDE error PUNTOCOMA 
            {
              SList RESULT =null;
		 RESULT= ass.list(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInclude",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SInclude ::= INCLUDE STRING PUNTOCOMA 
            {
              SList RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = include(name.lexema()); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInclude",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SInclude ::= INCLUDE error PUNTOCOMA 
            {
              SList RESULT =null;
		 RESULT= ass.list(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInclude",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S0 ::= S0 SIF0 
            {
              SList RESULT =null;
		SList lista = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		S s = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 if(s!= null){ lista.add(s); if(lista.getUL() == null) lista.setUL(s.getUL());} RESULT=lista; RESULT.setUL(lista.getUL()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S0",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S0 ::= 
            {
              SList RESULT =null;
		 RESULT= ass.list(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S0",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SIF0 ::= SIF0NB 
            {
              S RESULT =null;
		S s = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=s; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SIF0 ::= SIF1 
            {
              S RESULT =null;
		S s = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=s; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SIF0NB ::= IF PAP E0 PCIERRE SIF0NB 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S then = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.getIf(cond,then); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SIF0NB ::= IF PAP E0 PCIERRE SIF1 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S then = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.getIf(cond,then);RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SIF0NB ::= IF PAP E0 PCIERRE SIF1 ELSE SIF0NB 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		S then = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S elsee = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.getIf(cond,then,elsee); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SIF0NB ::= IF error PCIERRE SIF0NB 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIF0NB ::= IF error PCIERRE SIF1 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIF0NB ::= IF error PCIERRE SIF1 ELSE SIF0NB 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF0NB",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIF1 ::= IF PAP E0 PCIERRE SIF1 ELSE SIF1 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		S then = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S elsee = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.getIf(cond,then,elsee);RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF1",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIF1 ::= IF error PCIERRE SIF1 ELSE SIF1 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF1",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIF1 ::= SInstr 
            {
              S RESULT =null;
		S s = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=s; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIF1",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SInstr ::= SBlock 
            {
              S RESULT =null;
		SList l = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SInstr ::= SPuntoComa PUNTOCOMA 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SInstr ::= error PUNTOCOMA 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SInstr ::= SAsig 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SInstr ::= SFuncion 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SInstr ::= SClase 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SInstr ::= SWhile 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SInstr ::= SFor 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SInstr ::= SSwitch 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SInstr",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SPuntoComa ::= SEnum 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SPuntoComa ::= SUsing 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SPuntoComa ::= SDecl 
            {
              S RESULT =null;
		S l = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SPuntoComa ::= RETURN E0 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.ret(e); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SPuntoComa ::= RETURN 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.ret(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SPuntoComa ::= CONTINUE 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.contin(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SPuntoComa ::= BREAK 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.brek(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SPuntoComa ::= PRINT PAP STRING PCIERRE 
            {
              S RESULT =null;
		UnidadLexica s = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.print(s.lexema());RESULT.setUL(s); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SPuntoComa ::= PRINT PAP E0 PCIERRE 
            {
              S RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.print(e);RESULT.setUL(e.getUL()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SPuntoComa ::= PRUNT PAP IDEN PCIERRE 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica id = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.prunt((EIden) as.iden(id)); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SPuntoComa ::= EPCAux1 
            {
              S RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.se(e); RESULT.setUL(e.getUL());  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SPuntoComa ::= MASMAS IDEN 
            {
              S RESULT =null;
		UnidadLexica ma = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 E mm = as.masmas(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SPuntoComa ::= IDEN MASMAS 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica ma = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  E mm = as.masmas(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SPuntoComa ::= MENOSMENOS IDEN 
            {
              S RESULT =null;
		UnidadLexica ma = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  E mm = as.menosmenos(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SPuntoComa ::= IDEN MENOSMENOS 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica ma = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  E mm = as.menosmenos(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SPuntoComa",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SBlock ::= LAP S0 LCIERRE 
            {
              SList RESULT =null;
		UnidadLexica e = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		SList lista = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=lista; RESULT.setUL(e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBlock",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SBlock ::= error LCIERRE 
            {
              SList RESULT =null;
		UnidadLexica e = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.list();
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBlock",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SReduce ::= IDEN 
            {
              SReduce RESULT =null;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.sr(name.lexema()); RESULT.setUL(name); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReduce",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SReduce ::= SReduce CAP E0 CCIERRE 
            {
              SReduce RESULT =null;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E of = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.sr(sr, of); RESULT.setUL(name); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReduce",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STipo ::= STip 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=t; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STipo",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STipo ::= SReduce 
            {
              T RESULT =null;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= sr.toT(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STipo",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STip ::= INT 
            {
              T RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.ent(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STip ::= FLOAT 
            {
              T RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.flout(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STip ::= BOOL 
            {
              T RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.bul(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STip ::= CHAR 
            {
              T RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.chr(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STip ::= VOID 
            {
              T RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.vid(); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STip ::= STip POR 
            {
              T RESULT =null;
		T sub = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.punt(sub); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STip ::= STip CAP E0 CCIERRE 
            {
              T RESULT =null;
		T sub = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ast.array(sub,e); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STip ::= STip CAP CCIERRE 
            {
              T RESULT =null;
		T sub = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ast.array(sub, null); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STip ::= SReduce CAP CCIERRE 
            {
              T RESULT =null;
		SReduce sub = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ast.array(sub.toT(), null); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STip ::= SReduce POR 
            {
              T RESULT =null;
		SReduce sub = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ast.punt(sub.toT()); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STip",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EPCAux1 ::= EPC PAP PCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		  RESULT=as.callFunction(factor, new EList()); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux1",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EPCAux1 ::= EPC PAP SDeclArrayList PCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList al = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		  RESULT=as.callFunction(factor, al); al.setUL(i); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux1",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EPCAux1 ::= IDEN PAP PCIERRE 
            {
              E RESULT =null;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=as.callFunction(as.iden(name), new EList()); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux1",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EPCAux1 ::= IDEN PAP SDeclArrayList PCIERRE 
            {
              E RESULT =null;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList al = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=as.callFunction(as.iden(name), al);al.setUL(i); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux1",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EPCAux2 ::= EPC0 IGUAL 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  RESULT=e; RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux2",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EPCAux2 ::= SReduce IGUAL 
            {
              E RESULT =null;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sr.toE();RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux2",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EPCAux2 ::= error IGUAL 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.iden(""); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPCAux2",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EPC0 ::= POR SReduce 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.deref(sr.toE());  RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC0",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EPC0 ::= POR EPC0 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.deref(e);  RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC0",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EPC0 ::= EPC 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=e; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC0",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EPC ::= SReduce PUNT IDEN 
            {
              E RESULT =null;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica id = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.instance(sr.toE(), as.iden(id)); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EPC ::= EPC PUNT IDEN 
            {
              E RESULT =null;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica lexDeIden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.instance(otherSide,as.iden(lexDeIden)); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EPC ::= EPC CAP E0 CCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=as.subindice(factor, otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EPC ::= PAP EPC0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = e; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EPC ::= PAP SReduce PCIERRE 
            {
              E RESULT =null;
		SReduce sr = (SReduce)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = sr.toE(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EPC",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SAsig ::= EPCAux2 E0 PUNTOCOMA 
            {
              S RESULT =null;
		E ladoIz = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E ladoDer = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = ass.asig(ladoIz,ladoDer); RESULT.setUL(ladoIz.getUL()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsig",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SAsig ::= EPCAux2 ENew PUNTOCOMA 
            {
              S RESULT =null;
		E ladoIz = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E ladoDer = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = ass.asig(ladoIz,ladoDer); RESULT.setUL(ladoIz.getUL());  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsig",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SAsig ::= EPCAux2 error PUNTOCOMA 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsig",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SAsig ::= PUNTOCOMA 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsig",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STipoIden ::= STipo IDEN 
            {
              STipoIden RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica name = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ass.stipoiden(t, (EIden) as.iden(name)); RESULT.setUL(t.getUL()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("STipoIden",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SDecl ::= STipoIden 
            {
              S RESULT =null;
		STipoIden tipoId = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.decl(tipoId,null); RESULT.setUL(tipoId.getUL()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecl",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SDecl ::= STipoIden IGUAL E0 
            {
              S RESULT =null;
		STipoIden tipoId = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.decl(tipoId,e); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecl",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SDecl ::= STipoIden IGUAL ENew 
            {
              S RESULT =null;
		STipoIden tipoId = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.decl(tipoId,e); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecl",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SDecl ::= STipoIden IGUAL LAP SDeclArrayList LCIERRE 
            {
              S RESULT =null;
		STipoIden tipoId = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica j = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList list = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.decl(tipoId,list);list.setUL(j); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecl",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SDeclArrayList ::= SDeclArrayList COMA LAP SDeclArrayList LCIERRE 
            {
              EList RESULT =null;
		EList list = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList list2 = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=list; RESULT.add(list2); list.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclArrayList",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SDeclArrayList ::= SDeclArrayList COMA E0 
            {
              EList RESULT =null;
		EList list = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=list; RESULT.add(exp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclArrayList",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SDeclArrayList ::= E0 
            {
              EList RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EList(); RESULT.add(exp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclArrayList",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SDeclArrayList ::= LAP SDeclArrayList LCIERRE 
            {
              EList RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList list2 = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new EList(); RESULT.add(list2); list2.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclArrayList",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ENew ::= NEW STipo 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		T type = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.enew(type); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ENew",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SEnum ::= ENUM IDEN IGUAL LAP SEnumList LCIERRE 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		UnidadLexica iden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		EList list = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.senum(as.iden(iden),list); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnum",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SEnumList ::= SEnumList COMA IDEN 
            {
              EList RESULT =null;
		EList list = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica iden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=list; RESULT.add(as.iden(iden)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnumList",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SEnumList ::= IDEN 
            {
              EList RESULT =null;
		UnidadLexica iden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EList(); RESULT.add(as.iden(iden)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnumList",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SUsing ::= USING IDEN IGUAL STipo 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica lexDeIden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		T type = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.using(as.iden(lexDeIden) ,type); RESULT.setUL(i);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SUsing",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SFuncion ::= STipoIden PAP SFuncionArgs PCIERRE SBlock 
            {
              S RESULT =null;
		STipoIden tipoIden = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<S> args = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.function(tipoIden,args,bloque); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFuncion",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SFuncion ::= STipoIden PAP PCIERRE SBlock 
            {
              S RESULT =null;
		STipoIden tipoIden = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.function(tipoIden,new ArrayList<S>(),bloque); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFuncion",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SFuncion ::= error PCIERRE SBlock 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFuncion",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SFuncionArgs ::= SFuncionArgs COMA STipoIden 
            {
              ArrayList<S> RESULT =null;
		ArrayList<S> args = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		STipoIden tipoIden = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=args; RESULT.add(tipoIden); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFuncionArgs",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SFuncionArgs ::= STipoIden 
            {
              ArrayList<S> RESULT =null;
		STipoIden tipoIden = (STipoIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<S>(); RESULT.add(tipoIden); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFuncionArgs",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SClase ::= CLASS IDEN LAP SDeclList SFunctionList LCIERRE 
            {
              S RESULT =null;
		UnidadLexica var = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<S> attrList = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<S> functionList = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.sclase(as.iden(var),attrList,functionList); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SClase",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SClase ::= CLASS IDEN LAP SDeclList LCIERRE 
            {
              S RESULT =null;
		UnidadLexica var = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<S> attrList = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.sclase(as.iden(var),attrList); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SClase",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SDeclList ::= SDeclList SDecl PUNTOCOMA 
            {
              ArrayList<S> RESULT =null;
		ArrayList<S> list = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S decl = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=list; RESULT.add(decl); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclList",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SDeclList ::= SDecl PUNTOCOMA 
            {
              ArrayList<S> RESULT =null;
		S decl = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new ArrayList<S>(); RESULT.add(decl); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclList",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SDeclList ::= SDeclList error PUNTOCOMA 
            {
              ArrayList<S> RESULT =null;
		 RESULT=new ArrayList<S>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclList",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SDeclList ::= error 
            {
              ArrayList<S> RESULT =null;
		 RESULT=new ArrayList<S>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDeclList",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SFunctionList ::= SFunctionList SFuncion 
            {
              ArrayList<S> RESULT =null;
		ArrayList<S> list = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		S func = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=list; RESULT.add(func); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFunctionList",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SFunctionList ::= SFuncion 
            {
              ArrayList<S> RESULT =null;
		S func = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<S>(); RESULT.add(func); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFunctionList",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWhile ::= WHILE PAP E0 PCIERRE SInstr 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S instructs = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.swhile(exp,instructs); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWhile ::= WHILE error PCIERRE SInstr 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SFor ::= FOR PAP SDecl PUNTOCOMA E0 PUNTOCOMA SPuntoComa PCIERRE SInstr 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		S dec = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		S av = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S instructs = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=ass.sfor(dec,exp,av,instructs); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SFor ::= FOR error PCIERRE SInstr 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SSwitch ::= SWITCH PAP E0 PCIERRE LAP SCase SDefault LCIERRE 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E var = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<S> cases = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		S def = (S)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.sswitch(var,cases,def); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SSwitch ::= SWITCH PAP E0 PCIERRE LAP SCase LCIERRE 
            {
              S RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E var = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<S> cases = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.sswitch(var,cases); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SSwitch ::= SWITCH error PCIERRE LAP SCase LCIERRE 
            {
              S RESULT =null;
		ArrayList<S> cases = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SSwitch ::= SWITCH error PCIERRE LAP SCase SDefault LCIERRE 
            {
              S RESULT =null;
		ArrayList<S> cases = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SSwitch ::= SWITCH error PCIERRE error LCIERRE 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SSwitch ::= SWITCH PAP E0 PCIERRE error LCIERRE 
            {
              S RESULT =null;
		 RESULT=ass.serror(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SCase ::= SCase CASE PAP E0 PCIERRE SBlock 
            {
              ArrayList<S> RESULT =null;
		ArrayList<S> list = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E val = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=list; S c = ass.scase(val,bloque); c.setUL(i); RESULT.add(c); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCase",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SCase ::= CASE PAP E0 PCIERRE SBlock 
            {
              ArrayList<S> RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E val = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<S>(); S c = ass.scase(val,bloque); c.setUL(i); RESULT.add(c); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCase",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SCase ::= SCase CASE error PCIERRE SBlock 
            {
              ArrayList<S> RESULT =null;
		ArrayList<S> list = (ArrayList<S>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<S>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCase",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SCase ::= CASE error PCIERRE SBlock 
            {
              ArrayList<S> RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<S>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCase",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SEnumerable ::= NUMENT 
            {
              E RESULT =null;
		UnidadLexica val = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.num(val);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnumerable",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SEnumerable ::= CARACTER 
            {
              E RESULT =null;
		UnidadLexica val = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.car(val);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnumerable",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SEnumerable ::= IDEN 
            {
              E RESULT =null;
		UnidadLexica val = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.iden(val);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SEnumerable",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SDefault ::= DEFAULT SBlock 
            {
              S RESULT =null;
		SList bloque = (SList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=bloque; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDefault",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.or(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E0 ::= E1 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.and(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E1 ::= E2 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E2 ::= E2 IGUALLOG E3 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.igual(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E2 ::= E2 NOTIGUALLOG E3 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.notigual(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E2 ::= E3 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E3 ::= E3 MENOR E4 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.menor(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E3 ::= E3 MENORIGUAL E4 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.menorigual(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E3 ::= E3 MAYOR E4 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.mayor(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E3 ::= E3 MAYORIGUAL E4 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.mayorigual(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E3 ::= E4 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E4 ::= E4 MAS E5 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.suma(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E4 ::= E4 MINUS E5 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.resta(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E4 ::= E5 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E5 ::= E6 MINUSBIS E5 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.resta(otherSide,oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E5 ::= E6 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E6 ::= E6 POR E7 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.mul(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E6 ::= E6 DIV E7 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.div(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E6 ::= E6 MOD E7 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.mod(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E6 ::= E7 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E7 ::= E8 DIVBIS E7 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.div(otherSide,oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E7 ::= E8 MODBIS E7 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.mod(otherSide,oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E7 ::= E8 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E8 ::= E8 EXP E9 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.pow(oneSide,otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E8 ::= E9 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E9 ::= E10 EXPBIS E9 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.pow(otherSide,oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E9 ::= E10 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E10 ::= NOT E10 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.not(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E10 ::= MINUS E11 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.opuesto(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E10 ::= MASMAS E11 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.masmas(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E10 ::= MENOSMENOS E11 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.menosmenos(oneSide);RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E10 ::= POR E10 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.deref(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E10 ::= DIRMEM E11 
            {
              E RESULT =null;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.dirmem(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E10 ::= E11 
            {
              E RESULT =null;
		E sig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E11 ::= E11 PUNT IDEN 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica lexDeIden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.instance(factor, as.iden(lexDeIden)); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E11 ::= E11 CAP E0 CCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E otherSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=as.subindice(factor, otherSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E11 ::= E11 PAP PCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		  RESULT=as.callFunction(factor, new EList()); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E11 ::= E11 PAP SDeclArrayList PCIERRE 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		EList otherSide = (EList)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		  RESULT=as.callFunction(factor, otherSide); otherSide.setUL(i); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // E11 ::= E11 MASMAS 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.masmas(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // E11 ::= E11 MENOSMENOS 
            {
              E RESULT =null;
		E oneSide = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		UnidadLexica i = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.menosmenos(oneSide); RESULT.setUL(i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // E11 ::= Fact 
            {
              E RESULT =null;
		E factor = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=factor; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Fact ::= TRUE 
            {
              E RESULT =null;
		UnidadLexica lexTrue = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.bool(lexTrue); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Fact ::= FALSE 
            {
              E RESULT =null;
		UnidadLexica lexTrue = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.bool(lexTrue); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Fact ::= NUMENT 
            {
              E RESULT =null;
		UnidadLexica lexDeNum = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.num(lexDeNum); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Fact ::= NUMREAL 
            {
              E RESULT =null;
		UnidadLexica lexDeReal = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.numR(lexDeReal); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Fact ::= CARACTER 
            {
              E RESULT =null;
		UnidadLexica lex = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.car(lex); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Fact ::= IDEN 
            {
              E RESULT =null;
		UnidadLexica lexDeIden = (UnidadLexica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.iden(lexDeIden); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Fact ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E Exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = Exp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fact",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

