package constructorast;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import errors.GestionErroresExp;
import ast.E;
import ast.EIden;
import ast.ASExp;
import constructorast.Main;

import ast.S;
import ast.SList;
import ast.EList;
import ast.SDecl;
import ast.STipoIden;
import ast.SFunction;
import ast.SReduce;
import ast.ASSent;
import ast.T;
import ast.ASTipo;

parser code {: 
    public boolean hayError;
    private ArrayList<String> listaErrores;
    public void printErrores(String fileName){
        if(listaErrores.size() == 0) return;
        System.out.println("Errores sintacticos fichero: " + fileName + " Parando la compilacion");
        for(String s: listaErrores)
            System.out.println(s);
    }
    private GestionErroresExp errores;
    public void syntax_error(Symbol ul) { //cuando se llama a esta funcion????
        hayError = true;
        listaErrores.add(errores.errorSintactico((UnidadLexica) ul));
    }
:};

init with {:
    hayError = false;
    listaErrores = new ArrayList<String>();
    errores = new GestionErroresExp();
    AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
    alex.fijaGestionErrores(errores);
:};

scan with {: UnidadLexica n = (UnidadLexica) getScanner().next_token(); return n; :};
action code {:
    private ASExp as = new ASExp();
    private ASSent ass = new ASSent();
    private ASTipo ast = new ASTipo();
    public ArrayList<HashMap<String, S>> pilaTablas = new ArrayList<HashMap<String, S>>(); // de momento arrayList
    private SList include(String fileName){ // llama a la funcion de carga(que hace analisis lexico y sintactico), y trata los errores
        SList list2 = (SList) Main.load( "./" + fileName);
        if(list2 == null){
            parser.hayError = true; // no indicamos los errores, pues ya los ha indicado la funcion Main.load
            return ass.list();
        }
        return list2;
    }
:};


terminal UnidadLexica PUNTOCOMA,DOSPUNTOS,COMA,IGUAL,PAP,PCIERRE,CAP,CCIERRE,LAP,LCIERRE;
terminal UnidadLexica IGUALLOG,AND,OR,NOT,NOTIGUALLOG,MENOR,MENORIGUAL,MAYOR,MAYORIGUAL;
terminal UnidadLexica MOD,MODBIS,MAS,MINUS,MINUSBIS,POR,DIV,DIVBIS,EXP,EXPBIS,MASMAS,MENOSMENOS,DIRMEM,PUNT;
terminal UnidadLexica RETURN,CLASS,INT,FLOAT,BOOL,CHAR,VOID,TRUE,FALSE,ENUM,USING,IF,ELSE,WHILE,FOR,PRINT,PRUNT,CONTINUE,BREAK,NEW,SWITCH,CASE,DEFAULT,INCLUDE;
terminal UnidadLexica STRING,CARACTER; 
terminal UnidadLexica NUMENT,NUMREAL;
terminal UnidadLexica IDEN;

non terminal S S, SInstr, SEnum, SUsing; //no les pongo tipo porque todavia no devuelve un arbol
non terminal S SPuntoComa, SIF0, SIF0NB, SIF1; //los auxiliares
non terminal STipoIden STipoIden;
non terminal SReduce SReduce;
non terminal EList SDeclArrayList;
non terminal ArrayList<S> SDeclList;
non terminal ArrayList<S> SFunctionList;
non terminal EList SEnumList;
non terminal ArrayList<S> SFuncionArgs;
non terminal ArrayList<S> SCase;
non terminal SList SInclude, S0, SBlock;
non terminal S SDecl, SAsig, SFuncion, SClase, SWhile, SFor, SSwitch, SDefault;
non terminal E ENew;
non terminal T STipo, STip;
non terminal E E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, EPC, EPCAux1, EPCAux2, EPC0; // para las expresiones y prioridades
non terminal E Fact, SEnumerable;

/* Las dudas al profe entre comentarios multilinea*/
 
S        ::= SInclude:list1 S0:list2      // El no terminal inicial, desenvuelve la lista de instrucciones. Tal vez haya que concatenar lo generado por los includes
        {: list1.addAll(list2.get()); RESULT=list1; :};        // Asumo includes solo al principio. luego se puede cambiar. De hecho la GIC es mas facil admitiendo Includes donde sea xd
S        ::=  S0:lista
        {: RESULT=lista; :};

        
SInclude ::= SInclude:list1 INCLUDE:i STRING:name PUNTOCOMA 
    {: SList list2 = include(name.lexema()); list1.addAll(list2.get()); RESULT=list1; RESULT.setUL(i); :}; 
SInclude ::= SInclude INCLUDE error PUNTOCOMA 
    {: RESULT= ass.list(); :};
SInclude ::=  INCLUDE:i STRING:name PUNTOCOMA // Tal vez los ficheros se carguen aqui mismo, y el include devuelva el arbol
    {: RESULT = include(name.lexema()); RESULT.setUL(i); :}; 
SInclude ::= INCLUDE error PUNTOCOMA
    {: RESULT= ass.list(); :};
    
/*DUDA: Como detectamos que falta un puntoycoma */
S0       ::= S0:lista SIF0:s
    {: if(s!= null){ lista.add(s); if(lista.getUL() == null) lista.setUL(s.getUL());} RESULT=lista; RESULT.setUL(lista.getUL()); :}; 
S0       ::=                           // Desenvuelve instrucciones sin includes(para los bloques). Primero van los if(para la asociatividad del else
    {: RESULT= ass.list(); :}; //creamos la nueva lista(vacia)  
    
SIF0     ::= SIF0NB:s
    {: RESULT=s; :};
SIF0     ::= SIF1:s
    {: RESULT=s; :};
SIF0NB   ::= IF:i PAP E0:cond PCIERRE SIF0NB :then
    {: RESULT=ass.getIf(cond,then); RESULT.setUL(i); :};
SIF0NB   ::= IF:i PAP E0:cond PCIERRE SIF1:then 
    {: RESULT=ass.getIf(cond,then);RESULT.setUL(i); :};
SIF0NB   ::= IF:i PAP E0:cond PCIERRE SIF1:then ELSE SIF0NB:elsee
    {: RESULT=ass.getIf(cond,then,elsee); RESULT.setUL(i); :};
SIF0NB   ::= IF error PCIERRE SIF0NB
    {: RESULT=ass.serror(); :};
SIF0NB   ::= IF error PCIERRE SIF1
    {: RESULT=ass.serror(); :};
SIF0NB   ::= IF:i error PCIERRE SIF1 ELSE SIF0NB
    {: RESULT=ass.serror(); :};
SIF1     ::= IF:i PAP E0:cond PCIERRE SIF1:then ELSE SIF1:elsee
    {: RESULT=ass.getIf(cond,then,elsee);RESULT.setUL(i); :};
SIF1     ::= IF error PCIERRE SIF1 ELSE SIF1
    {: RESULT=ass.serror(); :};
SIF1     ::= SInstr:s 
    {: RESULT=s; :};

SInstr    ::= SBlock:l
    {: RESULT=l; :};
SInstr    ::= SPuntoComa:l PUNTOCOMA // Para no andar poniendo PUNTOCOMA en todas partes
    {: RESULT=l; :};
SInstr    ::= error PUNTOCOMA
    {: RESULT=ass.serror(); :};
SInstr ::= SAsig:l
    {: RESULT=l; :};
SInstr    ::= SFuncion:l
    {: RESULT=l; :};
SInstr    ::= SClase:l
    {: RESULT=l; :}; 
SInstr    ::= SWhile:l
    {: RESULT=l; :};
SInstr    ::= SFor:l
    {: RESULT=l; :};
SInstr    ::= SSwitch:l
    {: RESULT=l; :};
SPuntoComa ::= SEnum:l
    {: RESULT=l; :};
SPuntoComa ::= SUsing:l
    {: RESULT=l; :}; 
SPuntoComa ::= SDecl:l
    {: RESULT=l; :};
SPuntoComa ::= RETURN:i E0:e
    {: RESULT=ass.ret(e); RESULT.setUL(i); :}; 
SPuntoComa ::= RETURN:i
    {: RESULT=ass.ret(); RESULT.setUL(i); :};  
SPuntoComa ::= CONTINUE:i
    {: RESULT=ass.contin(); RESULT.setUL(i); :};  
SPuntoComa ::= BREAK:i
    {: RESULT=ass.brek(); RESULT.setUL(i); :};  
SPuntoComa ::= PRINT PAP STRING:s PCIERRE
    {: RESULT=ass.print(s.lexema());RESULT.setUL(s); :}; 
SPuntoComa ::= PRINT PAP E0:e PCIERRE
    {: RESULT=ass.print(e);RESULT.setUL(e.getUL()); :};
SPuntoComa ::= PRUNT PAP:i IDEN:id PCIERRE
    {: RESULT=ass.prunt((EIden) as.iden(id)); RESULT.setUL(i); :}; 
SPuntoComa ::= EPCAux1:e 
    {: RESULT=ass.se(e); RESULT.setUL(e.getUL());  :};
SPuntoComa ::= MASMAS:ma IDEN:i
    {: E mm = as.masmas(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); :};
SPuntoComa ::= IDEN:i MASMAS:ma
{:  E mm = as.masmas(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); :};
SPuntoComa ::= MENOSMENOS:ma IDEN:i
{:  E mm = as.menosmenos(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); :};
SPuntoComa ::= IDEN:i MENOSMENOS:ma
{:  E mm = as.menosmenos(as.iden(i)); mm.setUL(ma); RESULT=ass.se(mm); RESULT.setUL(ma); :};

SBlock    ::= LAP:e S0:lista LCIERRE                        // Bloque. Creo que vale para todo tipo de bloques (funciones, clases, etc)
    {: RESULT=lista; RESULT.setUL(e); :};
SBlock    ::= error LCIERRE:e
    {: RESULT=ass.list();:};

    


//SReduce recoge sintaxis que produce reduce reduce (tipo "a[3]" y acceso "a[3]")
SReduce ::= IDEN:name   
    {: RESULT=ass.sr(name.lexema()); RESULT.setUL(name); :};
SReduce ::= SReduce:sr CAP:name E0:of CCIERRE 
    {: RESULT=ass.sr(sr, of); RESULT.setUL(name); :};

STipo ::= STip:t  //tipos con identificadores, [] y *
    {: RESULT=t; :}; 
STipo ::=  SReduce:sr //tipos solo con identificadores y []
    {: RESULT= sr.toT(); :};

STip     ::= INT:i
    {: RESULT=ast.ent(); RESULT.setUL(i); :};
STip     ::= FLOAT:i
    {: RESULT=ast.flout(); RESULT.setUL(i); :};
STip     ::= BOOL:i
    {: RESULT=ast.bul(); RESULT.setUL(i); :};
STip     ::= CHAR:i 
    {: RESULT=ast.chr(); RESULT.setUL(i); :};
STip     ::= VOID:i
    {: RESULT=ast.vid(); RESULT.setUL(i); :};
STip     ::= STip:sub POR:i  
    {: RESULT=ast.punt(sub); RESULT.setUL(i); :};
STip     ::= STip:sub CAP:i E0:e CCIERRE 
    {: RESULT=ast.array(sub,e); RESULT.setUL(i); :};
STip     ::= STip:sub CAP:i CCIERRE 
    {: RESULT=ast.array(sub, null); RESULT.setUL(i); :};
STip     ::= SReduce:sub CAP:i CCIERRE 
    {: RESULT=ast.array(sub.toT(), null); RESULT.setUL(i); :};
STip     ::= SReduce:sub POR:i 
    {: RESULT=ast.punt(sub.toT()); RESULT.setUL(i); :};

//Para llamadas a funciones en instrucci√≥n con ;
EPCAux1 ::= EPC:factor PAP:i PCIERRE 
   {:  RESULT=as.callFunction(factor, new EList()); RESULT.setUL(i); :};
EPCAux1 ::= EPC:factor PAP:i SDeclArrayList:al PCIERRE 
   {:  RESULT=as.callFunction(factor, al); al.setUL(i); RESULT.setUL(i); :};
EPCAux1 ::= IDEN:name PAP:i PCIERRE 
   {: RESULT=as.callFunction(as.iden(name), new EList()); RESULT.setUL(i); :};
EPCAux1 ::= IDEN:name PAP:i SDeclArrayList:al PCIERRE // para llamar a funciones con a[i].b.()
   {: RESULT=as.callFunction(as.iden(name), al);al.setUL(i); RESULT.setUL(i); :};

// Para el lado izquierdo de las asignaciones.
EPCAux2 ::= EPC0:e IGUAL:i
    {:  RESULT=e; RESULT.setUL(i); :};
EPCAux2 ::= SReduce:sr IGUAL:i //para asignaciones
    {: RESULT=sr.toE();RESULT.setUL(i); :};
EPCAux2 ::= error IGUAL:i
    {: RESULT = as.iden(""); :}; 
//errores de asignaciones: lado izquierdo


//EPC y EPC0 son para conectar SReduce(que resuelve reduce reduce con los tipos) con asignaciones y llamadas a funciones.
EPC0 ::= POR:i SReduce:sr
   {: RESULT=as.deref(sr.toE());  RESULT.setUL(i); :};
EPC0 ::= POR:i EPC0:e
   {: RESULT=as.deref(e);  RESULT.setUL(i); :}; 
EPC0 ::= EPC:e
   {: RESULT=e; :}; 
   
EPC ::= SReduce:sr PUNT:i IDEN:id 
   {: RESULT=as.instance(sr.toE(), as.iden(id)); RESULT.setUL(i); :};
EPC ::= EPC:otherSide PUNT:i IDEN:lexDeIden  
   {: RESULT=as.instance(otherSide,as.iden(lexDeIden)); RESULT.setUL(i); :};
EPC ::= EPC:factor CAP:i E0:otherSide CCIERRE
   {: RESULT=as.subindice(factor, otherSide); RESULT.setUL(i); :};
EPC ::= PAP EPC0:e PCIERRE 
   {: RESULT = e; :};
EPC ::= PAP SReduce:sr PCIERRE
    {: RESULT = sr.toE(); :}; 
  
SAsig     ::= EPCAux2:ladoIz E0:ladoDer PUNTOCOMA
   {: RESULT = ass.asig(ladoIz,ladoDer); RESULT.setUL(ladoIz.getUL()); :};
SAsig     ::= EPCAux2:ladoIz ENew:ladoDer  PUNTOCOMA
   {: RESULT = ass.asig(ladoIz,ladoDer); RESULT.setUL(ladoIz.getUL());  :};
SAsig     ::= EPCAux2 error  PUNTOCOMA
    {: RESULT=ass.serror(); :};
SAsig     ::=PUNTOCOMA:i      // asignacion vacia, para while();
   {: RESULT = null;  :};

//guarda unt tipo y un identificador, para declaraciones y para argumentos de funciones
STipoIden ::= STipo:t IDEN:name
    {: RESULT = ass.stipoiden(t, (EIden) as.iden(name)); RESULT.setUL(t.getUL()); :};

SDecl     ::= STipoIden:tipoId
    {: RESULT=ass.decl(tipoId,null); RESULT.setUL(tipoId.getUL()); :};
SDecl     ::= STipoIden:tipoId IGUAL:i E0:e
    {: RESULT=ass.decl(tipoId,e); RESULT.setUL(i);:};
SDecl     ::= STipoIden:tipoId IGUAL:i ENew:e
    {: RESULT=ass.decl(tipoId,e); RESULT.setUL(i);:};
SDecl     ::= STipoIden:tipoId IGUAL:i LAP:j SDeclArrayList:list LCIERRE
    {: RESULT=ass.decl(tipoId,list);list.setUL(j); RESULT.setUL(i);:};
  
SDeclArrayList ::= SDeclArrayList:list COMA LAP:i SDeclArrayList:list2 LCIERRE
    {: RESULT=list; RESULT.add(list2); list.setUL(i); :};
SDeclArrayList ::= SDeclArrayList:list COMA E0:exp
    {: RESULT=list; RESULT.add(exp); :};
SDeclArrayList ::= E0:exp
    {: RESULT=new EList(); RESULT.add(exp); :};
SDeclArrayList ::= LAP:i SDeclArrayList:list2 LCIERRE
    {: RESULT=new EList(); RESULT.add(list2); list2.setUL(i); :};


ENew ::= NEW:i STipo:type
    {: RESULT=as.enew(type); RESULT.setUL(i);:};

SEnum     ::= ENUM:i  IDEN:iden IGUAL LAP SEnumList:list LCIERRE
    {: RESULT=ass.senum(as.iden(iden),list); RESULT.setUL(i);:};
SEnumList ::= SEnumList:list COMA IDEN:iden
    {: RESULT=list; RESULT.add(as.iden(iden)); :};
SEnumList ::= IDEN:iden
    {: RESULT=new EList(); RESULT.add(as.iden(iden)); :};

SUsing    ::= USING:i  IDEN:lexDeIden IGUAL STipo:type
    {: RESULT=ass.using(as.iden(lexDeIden) ,type); RESULT.setUL(i);:};
    


SFuncion  ::= STipoIden:tipoIden PAP:i SFuncionArgs:args PCIERRE SBlock:bloque
    {: RESULT=ass.function(tipoIden,args,bloque); RESULT.setUL(i); :};
SFuncion ::= STipoIden:tipoIden PAP:i PCIERRE SBlock:bloque
    {: RESULT=ass.function(tipoIden,new ArrayList<S>(),bloque); RESULT.setUL(i); :};
SFuncion ::= error PCIERRE SBlock
    {: RESULT=ass.serror(); :};
    
SFuncionArgs ::= SFuncionArgs:args COMA STipoIden:tipoIden
    {: RESULT=args; RESULT.add(tipoIden); :};
SFuncionArgs ::= STipoIden:tipoIden
    {: RESULT=new ArrayList<S>(); RESULT.add(tipoIden); :};

SClase     ::= CLASS IDEN:var LAP:i SDeclList:attrList SFunctionList:functionList LCIERRE
    {: RESULT=ass.sclase(as.iden(var),attrList,functionList); RESULT.setUL(i); :};
SClase     ::= CLASS IDEN:var LAP:i SDeclList:attrList LCIERRE
    {: RESULT=ass.sclase(as.iden(var),attrList); RESULT.setUL(i); :};

SDeclList  ::= SDeclList:list SDecl:decl PUNTOCOMA
    {: RESULT=list; RESULT.add(decl); :};
SDeclList  ::= SDecl:decl PUNTOCOMA
    {: RESULT=new ArrayList<S>(); RESULT.add(decl); :};
SDeclList  ::= SDeclList error PUNTOCOMA
    {: RESULT=new ArrayList<S>(); :};
SDeclList  ::= error 
    {: RESULT=new ArrayList<S>(); :};
SFunctionList ::= SFunctionList:list SFuncion:func
    {: RESULT=list; RESULT.add(func); :};
SFunctionList ::= SFuncion:func
    {: RESULT=new ArrayList<S>(); RESULT.add(func); :};


SWhile     ::= WHILE:i PAP E0:exp PCIERRE SInstr:instructs
    {: RESULT=ass.swhile(exp,instructs); RESULT.setUL(i); :};
SWhile     ::= WHILE error PCIERRE SInstr
    {: RESULT=ass.serror(); :};

SFor      ::= FOR:i PAP SDecl:dec PUNTOCOMA E0:exp PUNTOCOMA SPuntoComa:av PCIERRE SInstr:instructs
    {: RESULT=ass.sfor(dec,exp,av,instructs); RESULT.setUL(i); :};
SFor      ::= FOR error PCIERRE SInstr
    {: RESULT=ass.serror(); :};

SSwitch   ::= SWITCH:i PAP E0:var PCIERRE LAP SCase:cases SDefault:def LCIERRE
    {: RESULT=ass.sswitch(var,cases,def); RESULT.setUL(i); :};
SSwitch   ::= SWITCH:i PAP E0:var PCIERRE LAP SCase:cases LCIERRE
    {: RESULT=ass.sswitch(var,cases); RESULT.setUL(i); :};
SSwitch   ::= SWITCH error PCIERRE LAP SCase:cases LCIERRE
    {: RESULT=ass.serror(); :};
SSwitch   ::= SWITCH error PCIERRE LAP SCase:cases SDefault LCIERRE
    {: RESULT=ass.serror(); :};
SSwitch   ::= SWITCH error PCIERRE error LCIERRE
    {: RESULT=ass.serror(); :};   
SSwitch   ::= SWITCH PAP E0 PCIERRE error LCIERRE
    {: RESULT=ass.serror(); :};


SCase     ::= SCase:list CASE:i PAP E0:val PCIERRE SBlock:bloque
    {: RESULT=list; S c = ass.scase(val,bloque); c.setUL(i); RESULT.add(c); :};
SCase     ::= CASE:i PAP E0:val PCIERRE SBlock:bloque
    {: RESULT=new ArrayList<S>(); S c = ass.scase(val,bloque); c.setUL(i); RESULT.add(c); :};
SCase     ::= SCase:list CASE:i error PCIERRE SBlock:bloque
    {: RESULT=new ArrayList<S>(); :};
SCase     ::= CASE:i error PCIERRE SBlock:bloque
    {: RESULT=new ArrayList<S>(); :};
    
SEnumerable ::= NUMENT:val
    {: RESULT=as.num(val);:};
SEnumerable ::= CARACTER:val
    {: RESULT=as.car(val);:};
SEnumerable ::= IDEN:val
    {: RESULT=as.iden(val);:};

SDefault  ::= DEFAULT SBlock:bloque
    {: RESULT=bloque; :};


E0 ::= E0: oneSide OR:i E1: otherSide 
   {: RESULT=as.or(oneSide,otherSide); RESULT.setUL(i); :};
E0 ::= E1:sig
   {: RESULT=sig; :};

E1 ::= E1: oneSide AND:i E2: otherSide 
   {: RESULT=as.and(oneSide,otherSide); RESULT.setUL(i); :};
E1 ::= E2:sig
   {: RESULT=sig; :};

E2 ::= E2: oneSide IGUALLOG:i  E3: otherSide 
   {: RESULT=as.igual(oneSide,otherSide); RESULT.setUL(i); :};
E2 ::= E2: oneSide NOTIGUALLOG:i E3: otherSide 
   {: RESULT=as.notigual(oneSide,otherSide); RESULT.setUL(i); :};
E2 ::= E3:sig
   {: RESULT=sig; :};

E3 ::= E3: oneSide MENOR:i E4:otherSide 
   {: RESULT=as.menor(oneSide,otherSide); RESULT.setUL(i); :};
E3 ::= E3: oneSide MENORIGUAL:i E4:otherSide 
   {: RESULT=as.menorigual(oneSide,otherSide); RESULT.setUL(i); :};
E3 ::= E3: oneSide MAYOR:i E4:otherSide 
   {: RESULT=as.mayor(oneSide,otherSide); RESULT.setUL(i); :};
E3 ::= E3: oneSide MAYORIGUAL:i E4:otherSide 
   {: RESULT=as.mayorigual(oneSide,otherSide); RESULT.setUL(i); :};
E3 ::= E4:sig
   {: RESULT=sig; :};

E4 ::= E4: oneSide MAS:i E5: otherSide
   {: RESULT=as.suma(oneSide,otherSide); RESULT.setUL(i); :};
E4 ::= E4: oneSide MINUS:i E5: otherSide
   {: RESULT=as.resta(oneSide,otherSide); RESULT.setUL(i); :};
E4 ::= E5:sig
   {: RESULT=sig; :};

E5 ::= E6: oneSide MINUSBIS:i E5: otherSide
   {: RESULT=as.resta(otherSide,oneSide); RESULT.setUL(i); :};
E5 ::= E6:sig
   {: RESULT=sig; :};

E6 ::= E6: oneSide POR:i E7: otherSide
   {: RESULT=as.mul(oneSide,otherSide); RESULT.setUL(i); :};
E6 ::= E6: oneSide DIV:i E7: otherSide
   {: RESULT=as.div(oneSide,otherSide); RESULT.setUL(i); :};
E6 ::= E6: oneSide MOD:i E7: otherSide
   {: RESULT=as.mod(oneSide,otherSide); RESULT.setUL(i); :};
E6 ::= E7:sig
   {: RESULT=sig; :};

E7 ::= E8: oneSide DIVBIS:i E7: otherSide
   {: RESULT=as.div(otherSide,oneSide); RESULT.setUL(i); :};
E7 ::= E8: oneSide MODBIS:i E7: otherSide
   {: RESULT=as.mod(otherSide,oneSide); RESULT.setUL(i); :};
E7 ::= E8:sig
   {: RESULT=sig; :};

E8 ::= E8:oneSide EXP:i E9:otherSide
   {: RESULT=as.pow(oneSide,otherSide); RESULT.setUL(i); :};
E8 ::= E9:sig
   {: RESULT=sig; :};

E9 ::= E10:oneSide EXPBIS:i E9:otherSide
   {: RESULT=as.pow(otherSide,oneSide); RESULT.setUL(i); :};
E9 ::= E10:sig
   {: RESULT=sig; :};

E10 ::= NOT:i E10:oneSide
   {: RESULT=as.not(oneSide); RESULT.setUL(i); :};
E10 ::= MINUS:i E11:oneSide
   {: RESULT=as.opuesto(oneSide); RESULT.setUL(i); :};
E10 ::= MASMAS:i  E11:oneSide
   {: RESULT=as.masmas(oneSide); RESULT.setUL(i); :};
E10 ::= MENOSMENOS:i E11:oneSide
   {: RESULT=as.menosmenos(oneSide);RESULT.setUL(i); :};
E10 ::= POR:i E10:oneSide
   {: RESULT=as.deref(oneSide); RESULT.setUL(i); :};
E10 ::= DIRMEM:i E11:oneSide
   {: RESULT=as.dirmem(oneSide); RESULT.setUL(i); :};
E10 ::= E11:sig
   {: RESULT=sig; :};

E11 ::= E11:factor PUNT:i  IDEN:lexDeIden 
   {: RESULT=as.instance(factor, as.iden(lexDeIden)); RESULT.setUL(i); :};
E11 ::= E11:factor CAP:i E0:otherSide CCIERRE
   {: RESULT=as.subindice(factor, otherSide); RESULT.setUL(i); :};
E11 ::= E11:factor PAP:i PCIERRE
   {:  RESULT=as.callFunction(factor, new EList()); RESULT.setUL(i); :};
E11 ::= E11:factor PAP:i SDeclArrayList:otherSide PCIERRE
   {:  RESULT=as.callFunction(factor, otherSide); otherSide.setUL(i); RESULT.setUL(i); :};
E11 ::=  E11:oneSide MASMAS:i
   {: RESULT=as.masmas(oneSide); RESULT.setUL(i); :};
E11 ::=  E11:oneSide MENOSMENOS:i 
   {: RESULT=as.menosmenos(oneSide); RESULT.setUL(i); :};
E11 ::= Fact:factor
   {: RESULT=factor; :};

Fact ::= TRUE:lexTrue           
   {: RESULT = as.bool(lexTrue); :};
Fact ::= FALSE:lexTrue           
   {: RESULT = as.bool(lexTrue); :};
Fact ::= NUMENT:lexDeNum           
   {: RESULT = as.num(lexDeNum); :};
Fact ::= NUMREAL:lexDeReal           
   {: RESULT = as.numR(lexDeReal); :};
Fact ::= CARACTER:lex           
   {: RESULT = as.car(lex); :};
Fact ::= IDEN:lexDeIden           
   {: RESULT = as.iden(lexDeIden); :};
Fact ::= PAP E0:Exp PCIERRE
   {: RESULT = Exp; :};


